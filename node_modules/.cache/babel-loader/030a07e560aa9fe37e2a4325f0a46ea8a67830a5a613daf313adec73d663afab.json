{"ast":null,"code":"// vim:ts=4:sts=4:sw=4:\n/*!\n *\n * Copyright 2009-2017 Kris Kowal under the terms of the MIT\n * license found at https://github.com/kriskowal/q/blob/v1/LICENSE\n *\n * With parts by Tyler Close\n * Copyright 2007-2009 Tyler Close under the terms of the MIT X license found\n * at http://www.opensource.org/licenses/mit-license.html\n * Forked at ref_send.js version: 2009-05-11\n *\n * With parts by Mark Miller\n * Copyright (C) 2011 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\n(function (definition) {\n  \"use strict\";\n\n  // This file will function properly as a <script> tag, or a module\n  // using CommonJS and NodeJS or RequireJS module formats.  In\n  // Common/Node/RequireJS, the module exports the Q API and when\n  // executed as a simple <script>, it creates a Q global instead.\n\n  // Montage Require\n  if (typeof bootstrap === \"function\") {\n    bootstrap(\"promise\", definition);\n\n    // CommonJS\n  } else if (typeof exports === \"object\" && typeof module === \"object\") {\n    module.exports = definition();\n\n    // RequireJS\n  } else if (typeof define === \"function\" && define.amd) {\n    define(definition);\n\n    // SES (Secure EcmaScript)\n  } else if (typeof ses !== \"undefined\") {\n    if (!ses.ok()) {\n      return;\n    } else {\n      ses.makeQ = definition;\n    }\n\n    // <script>\n  } else if (typeof window !== \"undefined\" || typeof self !== \"undefined\") {\n    // Prefer window over self for add-on scripts. Use self for\n    // non-windowed contexts.\n    var global = typeof window !== \"undefined\" ? window : self;\n\n    // Get the `window` object, save the previous Q global\n    // and initialize Q as a global.\n    var previousQ = global.Q;\n    global.Q = definition();\n\n    // Add a noConflict function so Q can be removed from the\n    // global namespace.\n    global.Q.noConflict = function () {\n      global.Q = previousQ;\n      return this;\n    };\n  } else {\n    throw new Error(\"This environment was not anticipated by Q. Please file a bug.\");\n  }\n})(function () {\n  \"use strict\";\n\n  var hasStacks = false;\n  try {\n    throw new Error();\n  } catch (e) {\n    hasStacks = !!e.stack;\n  }\n\n  // All code after this point will be filtered from stack traces reported\n  // by Q.\n  var qStartingLine = captureLine();\n  var qFileName;\n\n  // shims\n\n  // used for fallback in \"allResolved\"\n  var noop = function () {};\n\n  // Use the fastest possible means to execute a task in a future turn\n  // of the event loop.\n  var nextTick = function () {\n    // linked list of tasks (single, with head node)\n    var head = {\n      task: void 0,\n      next: null\n    };\n    var tail = head;\n    var flushing = false;\n    var requestTick = void 0;\n    var isNodeJS = false;\n    // queue for late tasks, used by unhandled rejection tracking\n    var laterQueue = [];\n    function flush() {\n      /* jshint loopfunc: true */\n      var task, domain;\n      while (head.next) {\n        head = head.next;\n        task = head.task;\n        head.task = void 0;\n        domain = head.domain;\n        if (domain) {\n          head.domain = void 0;\n          domain.enter();\n        }\n        runSingle(task, domain);\n      }\n      while (laterQueue.length) {\n        task = laterQueue.pop();\n        runSingle(task);\n      }\n      flushing = false;\n    }\n    // runs a single function in the async queue\n    function runSingle(task, domain) {\n      try {\n        task();\n      } catch (e) {\n        if (isNodeJS) {\n          // In node, uncaught exceptions are considered fatal errors.\n          // Re-throw them synchronously to interrupt flushing!\n\n          // Ensure continuation if the uncaught exception is suppressed\n          // listening \"uncaughtException\" events (as domains does).\n          // Continue in next event to avoid tick recursion.\n          if (domain) {\n            domain.exit();\n          }\n          setTimeout(flush, 0);\n          if (domain) {\n            domain.enter();\n          }\n          throw e;\n        } else {\n          // In browsers, uncaught exceptions are not fatal.\n          // Re-throw them asynchronously to avoid slow-downs.\n          setTimeout(function () {\n            throw e;\n          }, 0);\n        }\n      }\n      if (domain) {\n        domain.exit();\n      }\n    }\n    nextTick = function (task) {\n      tail = tail.next = {\n        task: task,\n        domain: isNodeJS && process.domain,\n        next: null\n      };\n      if (!flushing) {\n        flushing = true;\n        requestTick();\n      }\n    };\n    if (typeof process === \"object\" && process.toString() === \"[object process]\" && process.nextTick) {\n      // Ensure Q is in a real Node environment, with a `process.nextTick`.\n      // To see through fake Node environments:\n      // * Mocha test runner - exposes a `process` global without a `nextTick`\n      // * Browserify - exposes a `process.nexTick` function that uses\n      //   `setTimeout`. In this case `setImmediate` is preferred because\n      //    it is faster. Browserify's `process.toString()` yields\n      //   \"[object Object]\", while in a real Node environment\n      //   `process.toString()` yields \"[object process]\".\n      isNodeJS = true;\n      requestTick = function () {\n        process.nextTick(flush);\n      };\n    } else if (typeof setImmediate === \"function\") {\n      // In IE10, Node.js 0.9+, or https://github.com/NobleJS/setImmediate\n      if (typeof window !== \"undefined\") {\n        requestTick = setImmediate.bind(window, flush);\n      } else {\n        requestTick = function () {\n          setImmediate(flush);\n        };\n      }\n    } else if (typeof MessageChannel !== \"undefined\") {\n      // modern browsers\n      // http://www.nonblocking.io/2011/06/windownexttick.html\n      var channel = new MessageChannel();\n      // At least Safari Version 6.0.5 (8536.30.1) intermittently cannot create\n      // working message ports the first time a page loads.\n      channel.port1.onmessage = function () {\n        requestTick = requestPortTick;\n        channel.port1.onmessage = flush;\n        flush();\n      };\n      var requestPortTick = function () {\n        // Opera requires us to provide a message payload, regardless of\n        // whether we use it.\n        channel.port2.postMessage(0);\n      };\n      requestTick = function () {\n        setTimeout(flush, 0);\n        requestPortTick();\n      };\n    } else {\n      // old browsers\n      requestTick = function () {\n        setTimeout(flush, 0);\n      };\n    }\n    // runs a task after all other tasks have been run\n    // this is useful for unhandled rejection tracking that needs to happen\n    // after all `then`d tasks have been run.\n    nextTick.runAfter = function (task) {\n      laterQueue.push(task);\n      if (!flushing) {\n        flushing = true;\n        requestTick();\n      }\n    };\n    return nextTick;\n  }();\n\n  // Attempt to make generics safe in the face of downstream\n  // modifications.\n  // There is no situation where this is necessary.\n  // If you need a security guarantee, these primordials need to be\n  // deeply frozen anyway, and if you don’t need a security guarantee,\n  // this is just plain paranoid.\n  // However, this **might** have the nice side-effect of reducing the size of\n  // the minified code by reducing x.call() to merely x()\n  // See Mark Miller’s explanation of what this does.\n  // http://wiki.ecmascript.org/doku.php?id=conventions:safe_meta_programming\n  var call = Function.call;\n  function uncurryThis(f) {\n    return function () {\n      return call.apply(f, arguments);\n    };\n  }\n  // This is equivalent, but slower:\n  // uncurryThis = Function_bind.bind(Function_bind.call);\n  // http://jsperf.com/uncurrythis\n\n  var array_slice = uncurryThis(Array.prototype.slice);\n  var array_reduce = uncurryThis(Array.prototype.reduce || function (callback, basis) {\n    var index = 0,\n      length = this.length;\n    // concerning the initial value, if one is not provided\n    if (arguments.length === 1) {\n      // seek to the first value in the array, accounting\n      // for the possibility that is is a sparse array\n      do {\n        if (index in this) {\n          basis = this[index++];\n          break;\n        }\n        if (++index >= length) {\n          throw new TypeError();\n        }\n      } while (1);\n    }\n    // reduce\n    for (; index < length; index++) {\n      // account for the possibility that the array is sparse\n      if (index in this) {\n        basis = callback(basis, this[index], index);\n      }\n    }\n    return basis;\n  });\n  var array_indexOf = uncurryThis(Array.prototype.indexOf || function (value) {\n    // not a very good shim, but good enough for our one use of it\n    for (var i = 0; i < this.length; i++) {\n      if (this[i] === value) {\n        return i;\n      }\n    }\n    return -1;\n  });\n  var array_map = uncurryThis(Array.prototype.map || function (callback, thisp) {\n    var self = this;\n    var collect = [];\n    array_reduce(self, function (undefined, value, index) {\n      collect.push(callback.call(thisp, value, index, self));\n    }, void 0);\n    return collect;\n  });\n  var object_create = Object.create || function (prototype) {\n    function Type() {}\n    Type.prototype = prototype;\n    return new Type();\n  };\n  var object_defineProperty = Object.defineProperty || function (obj, prop, descriptor) {\n    obj[prop] = descriptor.value;\n    return obj;\n  };\n  var object_hasOwnProperty = uncurryThis(Object.prototype.hasOwnProperty);\n  var object_keys = Object.keys || function (object) {\n    var keys = [];\n    for (var key in object) {\n      if (object_hasOwnProperty(object, key)) {\n        keys.push(key);\n      }\n    }\n    return keys;\n  };\n  var object_toString = uncurryThis(Object.prototype.toString);\n  function isObject(value) {\n    return value === Object(value);\n  }\n\n  // generator related shims\n\n  // FIXME: Remove this function once ES6 generators are in SpiderMonkey.\n  function isStopIteration(exception) {\n    return object_toString(exception) === \"[object StopIteration]\" || exception instanceof QReturnValue;\n  }\n\n  // FIXME: Remove this helper and Q.return once ES6 generators are in\n  // SpiderMonkey.\n  var QReturnValue;\n  if (typeof ReturnValue !== \"undefined\") {\n    QReturnValue = ReturnValue;\n  } else {\n    QReturnValue = function (value) {\n      this.value = value;\n    };\n  }\n\n  // long stack traces\n\n  var STACK_JUMP_SEPARATOR = \"From previous event:\";\n  function makeStackTraceLong(error, promise) {\n    // If possible, transform the error stack trace by removing Node and Q\n    // cruft, then concatenating with the stack trace of `promise`. See #57.\n    if (hasStacks && promise.stack && typeof error === \"object\" && error !== null && error.stack) {\n      var stacks = [];\n      for (var p = promise; !!p; p = p.source) {\n        if (p.stack && (!error.__minimumStackCounter__ || error.__minimumStackCounter__ > p.stackCounter)) {\n          object_defineProperty(error, \"__minimumStackCounter__\", {\n            value: p.stackCounter,\n            configurable: true\n          });\n          stacks.unshift(p.stack);\n        }\n      }\n      stacks.unshift(error.stack);\n      var concatedStacks = stacks.join(\"\\n\" + STACK_JUMP_SEPARATOR + \"\\n\");\n      var stack = filterStackString(concatedStacks);\n      object_defineProperty(error, \"stack\", {\n        value: stack,\n        configurable: true\n      });\n    }\n  }\n  function filterStackString(stackString) {\n    var lines = stackString.split(\"\\n\");\n    var desiredLines = [];\n    for (var i = 0; i < lines.length; ++i) {\n      var line = lines[i];\n      if (!isInternalFrame(line) && !isNodeFrame(line) && line) {\n        desiredLines.push(line);\n      }\n    }\n    return desiredLines.join(\"\\n\");\n  }\n  function isNodeFrame(stackLine) {\n    return stackLine.indexOf(\"(module.js:\") !== -1 || stackLine.indexOf(\"(node.js:\") !== -1;\n  }\n  function getFileNameAndLineNumber(stackLine) {\n    // Named functions: \"at functionName (filename:lineNumber:columnNumber)\"\n    // In IE10 function name can have spaces (\"Anonymous function\") O_o\n    var attempt1 = /at .+ \\((.+):(\\d+):(?:\\d+)\\)$/.exec(stackLine);\n    if (attempt1) {\n      return [attempt1[1], Number(attempt1[2])];\n    }\n\n    // Anonymous functions: \"at filename:lineNumber:columnNumber\"\n    var attempt2 = /at ([^ ]+):(\\d+):(?:\\d+)$/.exec(stackLine);\n    if (attempt2) {\n      return [attempt2[1], Number(attempt2[2])];\n    }\n\n    // Firefox style: \"function@filename:lineNumber or @filename:lineNumber\"\n    var attempt3 = /.*@(.+):(\\d+)$/.exec(stackLine);\n    if (attempt3) {\n      return [attempt3[1], Number(attempt3[2])];\n    }\n  }\n  function isInternalFrame(stackLine) {\n    var fileNameAndLineNumber = getFileNameAndLineNumber(stackLine);\n    if (!fileNameAndLineNumber) {\n      return false;\n    }\n    var fileName = fileNameAndLineNumber[0];\n    var lineNumber = fileNameAndLineNumber[1];\n    return fileName === qFileName && lineNumber >= qStartingLine && lineNumber <= qEndingLine;\n  }\n\n  // discover own file name and line number range for filtering stack\n  // traces\n  function captureLine() {\n    if (!hasStacks) {\n      return;\n    }\n    try {\n      throw new Error();\n    } catch (e) {\n      var lines = e.stack.split(\"\\n\");\n      var firstLine = lines[0].indexOf(\"@\") > 0 ? lines[1] : lines[2];\n      var fileNameAndLineNumber = getFileNameAndLineNumber(firstLine);\n      if (!fileNameAndLineNumber) {\n        return;\n      }\n      qFileName = fileNameAndLineNumber[0];\n      return fileNameAndLineNumber[1];\n    }\n  }\n  function deprecate(callback, name, alternative) {\n    return function () {\n      if (typeof console !== \"undefined\" && typeof console.warn === \"function\") {\n        console.warn(name + \" is deprecated, use \" + alternative + \" instead.\", new Error(\"\").stack);\n      }\n      return callback.apply(callback, arguments);\n    };\n  }\n\n  // end of shims\n  // beginning of real work\n\n  /**\n   * Constructs a promise for an immediate reference, passes promises through, or\n   * coerces promises from different systems.\n   * @param value immediate reference or promise\n   */\n  function Q(value) {\n    // If the object is already a Promise, return it directly.  This enables\n    // the resolve function to both be used to created references from objects,\n    // but to tolerably coerce non-promises to promises.\n    if (value instanceof Promise) {\n      return value;\n    }\n\n    // assimilate thenables\n    if (isPromiseAlike(value)) {\n      return coerce(value);\n    } else {\n      return fulfill(value);\n    }\n  }\n  Q.resolve = Q;\n\n  /**\n   * Performs a task in a future turn of the event loop.\n   * @param {Function} task\n   */\n  Q.nextTick = nextTick;\n\n  /**\n   * Controls whether or not long stack traces will be on\n   */\n  Q.longStackSupport = false;\n\n  /**\n   * The counter is used to determine the stopping point for building\n   * long stack traces. In makeStackTraceLong we walk backwards through\n   * the linked list of promises, only stacks which were created before\n   * the rejection are concatenated.\n   */\n  var longStackCounter = 1;\n\n  // enable long stacks if Q_DEBUG is set\n  if (typeof process === \"object\" && process && process.env && process.env.Q_DEBUG) {\n    Q.longStackSupport = true;\n  }\n\n  /**\n   * Constructs a {promise, resolve, reject} object.\n   *\n   * `resolve` is a callback to invoke with a more resolved value for the\n   * promise. To fulfill the promise, invoke `resolve` with any value that is\n   * not a thenable. To reject the promise, invoke `resolve` with a rejected\n   * thenable, or invoke `reject` with the reason directly. To resolve the\n   * promise to another thenable, thus putting it in the same state, invoke\n   * `resolve` with that other thenable.\n   */\n  Q.defer = defer;\n  function defer() {\n    // if \"messages\" is an \"Array\", that indicates that the promise has not yet\n    // been resolved.  If it is \"undefined\", it has been resolved.  Each\n    // element of the messages array is itself an array of complete arguments to\n    // forward to the resolved promise.  We coerce the resolution value to a\n    // promise using the `resolve` function because it handles both fully\n    // non-thenable values and other thenables gracefully.\n    var messages = [],\n      progressListeners = [],\n      resolvedPromise;\n    var deferred = object_create(defer.prototype);\n    var promise = object_create(Promise.prototype);\n    promise.promiseDispatch = function (resolve, op, operands) {\n      var args = array_slice(arguments);\n      if (messages) {\n        messages.push(args);\n        if (op === \"when\" && operands[1]) {\n          // progress operand\n          progressListeners.push(operands[1]);\n        }\n      } else {\n        Q.nextTick(function () {\n          resolvedPromise.promiseDispatch.apply(resolvedPromise, args);\n        });\n      }\n    };\n\n    // XXX deprecated\n    promise.valueOf = function () {\n      if (messages) {\n        return promise;\n      }\n      var nearerValue = nearer(resolvedPromise);\n      if (isPromise(nearerValue)) {\n        resolvedPromise = nearerValue; // shorten chain\n      }\n\n      return nearerValue;\n    };\n    promise.inspect = function () {\n      if (!resolvedPromise) {\n        return {\n          state: \"pending\"\n        };\n      }\n      return resolvedPromise.inspect();\n    };\n    if (Q.longStackSupport && hasStacks) {\n      try {\n        throw new Error();\n      } catch (e) {\n        // NOTE: don't try to use `Error.captureStackTrace` or transfer the\n        // accessor around; that causes memory leaks as per GH-111. Just\n        // reify the stack trace as a string ASAP.\n        //\n        // At the same time, cut off the first line; it's always just\n        // \"[object Promise]\\n\", as per the `toString`.\n        promise.stack = e.stack.substring(e.stack.indexOf(\"\\n\") + 1);\n        promise.stackCounter = longStackCounter++;\n      }\n    }\n\n    // NOTE: we do the checks for `resolvedPromise` in each method, instead of\n    // consolidating them into `become`, since otherwise we'd create new\n    // promises with the lines `become(whatever(value))`. See e.g. GH-252.\n\n    function become(newPromise) {\n      resolvedPromise = newPromise;\n      if (Q.longStackSupport && hasStacks) {\n        // Only hold a reference to the new promise if long stacks\n        // are enabled to reduce memory usage\n        promise.source = newPromise;\n      }\n      array_reduce(messages, function (undefined, message) {\n        Q.nextTick(function () {\n          newPromise.promiseDispatch.apply(newPromise, message);\n        });\n      }, void 0);\n      messages = void 0;\n      progressListeners = void 0;\n    }\n    deferred.promise = promise;\n    deferred.resolve = function (value) {\n      if (resolvedPromise) {\n        return;\n      }\n      become(Q(value));\n    };\n    deferred.fulfill = function (value) {\n      if (resolvedPromise) {\n        return;\n      }\n      become(fulfill(value));\n    };\n    deferred.reject = function (reason) {\n      if (resolvedPromise) {\n        return;\n      }\n      become(reject(reason));\n    };\n    deferred.notify = function (progress) {\n      if (resolvedPromise) {\n        return;\n      }\n      array_reduce(progressListeners, function (undefined, progressListener) {\n        Q.nextTick(function () {\n          progressListener(progress);\n        });\n      }, void 0);\n    };\n    return deferred;\n  }\n\n  /**\n   * Creates a Node-style callback that will resolve or reject the deferred\n   * promise.\n   * @returns a nodeback\n   */\n  defer.prototype.makeNodeResolver = function () {\n    var self = this;\n    return function (error, value) {\n      if (error) {\n        self.reject(error);\n      } else if (arguments.length > 2) {\n        self.resolve(array_slice(arguments, 1));\n      } else {\n        self.resolve(value);\n      }\n    };\n  };\n\n  /**\n   * @param resolver {Function} a function that returns nothing and accepts\n   * the resolve, reject, and notify functions for a deferred.\n   * @returns a promise that may be resolved with the given resolve and reject\n   * functions, or rejected by a thrown exception in resolver\n   */\n  Q.Promise = promise; // ES6\n  Q.promise = promise;\n  function promise(resolver) {\n    if (typeof resolver !== \"function\") {\n      throw new TypeError(\"resolver must be a function.\");\n    }\n    var deferred = defer();\n    try {\n      resolver(deferred.resolve, deferred.reject, deferred.notify);\n    } catch (reason) {\n      deferred.reject(reason);\n    }\n    return deferred.promise;\n  }\n  promise.race = race; // ES6\n  promise.all = all; // ES6\n  promise.reject = reject; // ES6\n  promise.resolve = Q; // ES6\n\n  // XXX experimental.  This method is a way to denote that a local value is\n  // serializable and should be immediately dispatched to a remote upon request,\n  // instead of passing a reference.\n  Q.passByCopy = function (object) {\n    //freeze(object);\n    //passByCopies.set(object, true);\n    return object;\n  };\n  Promise.prototype.passByCopy = function () {\n    //freeze(object);\n    //passByCopies.set(object, true);\n    return this;\n  };\n\n  /**\n   * If two promises eventually fulfill to the same value, promises that value,\n   * but otherwise rejects.\n   * @param x {Any*}\n   * @param y {Any*}\n   * @returns {Any*} a promise for x and y if they are the same, but a rejection\n   * otherwise.\n   *\n   */\n  Q.join = function (x, y) {\n    return Q(x).join(y);\n  };\n  Promise.prototype.join = function (that) {\n    return Q([this, that]).spread(function (x, y) {\n      if (x === y) {\n        // TODO: \"===\" should be Object.is or equiv\n        return x;\n      } else {\n        throw new Error(\"Q can't join: not the same: \" + x + \" \" + y);\n      }\n    });\n  };\n\n  /**\n   * Returns a promise for the first of an array of promises to become settled.\n   * @param answers {Array[Any*]} promises to race\n   * @returns {Any*} the first promise to be settled\n   */\n  Q.race = race;\n  function race(answerPs) {\n    return promise(function (resolve, reject) {\n      // Switch to this once we can assume at least ES5\n      // answerPs.forEach(function (answerP) {\n      //     Q(answerP).then(resolve, reject);\n      // });\n      // Use this in the meantime\n      for (var i = 0, len = answerPs.length; i < len; i++) {\n        Q(answerPs[i]).then(resolve, reject);\n      }\n    });\n  }\n  Promise.prototype.race = function () {\n    return this.then(Q.race);\n  };\n\n  /**\n   * Constructs a Promise with a promise descriptor object and optional fallback\n   * function.  The descriptor contains methods like when(rejected), get(name),\n   * set(name, value), post(name, args), and delete(name), which all\n   * return either a value, a promise for a value, or a rejection.  The fallback\n   * accepts the operation name, a resolver, and any further arguments that would\n   * have been forwarded to the appropriate method above had a method been\n   * provided with the proper name.  The API makes no guarantees about the nature\n   * of the returned object, apart from that it is usable whereever promises are\n   * bought and sold.\n   */\n  Q.makePromise = Promise;\n  function Promise(descriptor, fallback, inspect) {\n    if (fallback === void 0) {\n      fallback = function (op) {\n        return reject(new Error(\"Promise does not support operation: \" + op));\n      };\n    }\n    if (inspect === void 0) {\n      inspect = function () {\n        return {\n          state: \"unknown\"\n        };\n      };\n    }\n    var promise = object_create(Promise.prototype);\n    promise.promiseDispatch = function (resolve, op, args) {\n      var result;\n      try {\n        if (descriptor[op]) {\n          result = descriptor[op].apply(promise, args);\n        } else {\n          result = fallback.call(promise, op, args);\n        }\n      } catch (exception) {\n        result = reject(exception);\n      }\n      if (resolve) {\n        resolve(result);\n      }\n    };\n    promise.inspect = inspect;\n\n    // XXX deprecated `valueOf` and `exception` support\n    if (inspect) {\n      var inspected = inspect();\n      if (inspected.state === \"rejected\") {\n        promise.exception = inspected.reason;\n      }\n      promise.valueOf = function () {\n        var inspected = inspect();\n        if (inspected.state === \"pending\" || inspected.state === \"rejected\") {\n          return promise;\n        }\n        return inspected.value;\n      };\n    }\n    return promise;\n  }\n  Promise.prototype.toString = function () {\n    return \"[object Promise]\";\n  };\n  Promise.prototype.then = function (fulfilled, rejected, progressed) {\n    var self = this;\n    var deferred = defer();\n    var done = false; // ensure the untrusted promise makes at most a\n    // single call to one of the callbacks\n\n    function _fulfilled(value) {\n      try {\n        return typeof fulfilled === \"function\" ? fulfilled(value) : value;\n      } catch (exception) {\n        return reject(exception);\n      }\n    }\n    function _rejected(exception) {\n      if (typeof rejected === \"function\") {\n        makeStackTraceLong(exception, self);\n        try {\n          return rejected(exception);\n        } catch (newException) {\n          return reject(newException);\n        }\n      }\n      return reject(exception);\n    }\n    function _progressed(value) {\n      return typeof progressed === \"function\" ? progressed(value) : value;\n    }\n    Q.nextTick(function () {\n      self.promiseDispatch(function (value) {\n        if (done) {\n          return;\n        }\n        done = true;\n        deferred.resolve(_fulfilled(value));\n      }, \"when\", [function (exception) {\n        if (done) {\n          return;\n        }\n        done = true;\n        deferred.resolve(_rejected(exception));\n      }]);\n    });\n\n    // Progress propagator need to be attached in the current tick.\n    self.promiseDispatch(void 0, \"when\", [void 0, function (value) {\n      var newValue;\n      var threw = false;\n      try {\n        newValue = _progressed(value);\n      } catch (e) {\n        threw = true;\n        if (Q.onerror) {\n          Q.onerror(e);\n        } else {\n          throw e;\n        }\n      }\n      if (!threw) {\n        deferred.notify(newValue);\n      }\n    }]);\n    return deferred.promise;\n  };\n  Q.tap = function (promise, callback) {\n    return Q(promise).tap(callback);\n  };\n\n  /**\n   * Works almost like \"finally\", but not called for rejections.\n   * Original resolution value is passed through callback unaffected.\n   * Callback may return a promise that will be awaited for.\n   * @param {Function} callback\n   * @returns {Q.Promise}\n   * @example\n   * doSomething()\n   *   .then(...)\n   *   .tap(console.log)\n   *   .then(...);\n   */\n  Promise.prototype.tap = function (callback) {\n    callback = Q(callback);\n    return this.then(function (value) {\n      return callback.fcall(value).thenResolve(value);\n    });\n  };\n\n  /**\n   * Registers an observer on a promise.\n   *\n   * Guarantees:\n   *\n   * 1. that fulfilled and rejected will be called only once.\n   * 2. that either the fulfilled callback or the rejected callback will be\n   *    called, but not both.\n   * 3. that fulfilled and rejected will not be called in this turn.\n   *\n   * @param value      promise or immediate reference to observe\n   * @param fulfilled  function to be called with the fulfilled value\n   * @param rejected   function to be called with the rejection exception\n   * @param progressed function to be called on any progress notifications\n   * @return promise for the return value from the invoked callback\n   */\n  Q.when = when;\n  function when(value, fulfilled, rejected, progressed) {\n    return Q(value).then(fulfilled, rejected, progressed);\n  }\n  Promise.prototype.thenResolve = function (value) {\n    return this.then(function () {\n      return value;\n    });\n  };\n  Q.thenResolve = function (promise, value) {\n    return Q(promise).thenResolve(value);\n  };\n  Promise.prototype.thenReject = function (reason) {\n    return this.then(function () {\n      throw reason;\n    });\n  };\n  Q.thenReject = function (promise, reason) {\n    return Q(promise).thenReject(reason);\n  };\n\n  /**\n   * If an object is not a promise, it is as \"near\" as possible.\n   * If a promise is rejected, it is as \"near\" as possible too.\n   * If it’s a fulfilled promise, the fulfillment value is nearer.\n   * If it’s a deferred promise and the deferred has been resolved, the\n   * resolution is \"nearer\".\n   * @param object\n   * @returns most resolved (nearest) form of the object\n   */\n\n  // XXX should we re-do this?\n  Q.nearer = nearer;\n  function nearer(value) {\n    if (isPromise(value)) {\n      var inspected = value.inspect();\n      if (inspected.state === \"fulfilled\") {\n        return inspected.value;\n      }\n    }\n    return value;\n  }\n\n  /**\n   * @returns whether the given object is a promise.\n   * Otherwise it is a fulfilled value.\n   */\n  Q.isPromise = isPromise;\n  function isPromise(object) {\n    return object instanceof Promise;\n  }\n  Q.isPromiseAlike = isPromiseAlike;\n  function isPromiseAlike(object) {\n    return isObject(object) && typeof object.then === \"function\";\n  }\n\n  /**\n   * @returns whether the given object is a pending promise, meaning not\n   * fulfilled or rejected.\n   */\n  Q.isPending = isPending;\n  function isPending(object) {\n    return isPromise(object) && object.inspect().state === \"pending\";\n  }\n  Promise.prototype.isPending = function () {\n    return this.inspect().state === \"pending\";\n  };\n\n  /**\n   * @returns whether the given object is a value or fulfilled\n   * promise.\n   */\n  Q.isFulfilled = isFulfilled;\n  function isFulfilled(object) {\n    return !isPromise(object) || object.inspect().state === \"fulfilled\";\n  }\n  Promise.prototype.isFulfilled = function () {\n    return this.inspect().state === \"fulfilled\";\n  };\n\n  /**\n   * @returns whether the given object is a rejected promise.\n   */\n  Q.isRejected = isRejected;\n  function isRejected(object) {\n    return isPromise(object) && object.inspect().state === \"rejected\";\n  }\n  Promise.prototype.isRejected = function () {\n    return this.inspect().state === \"rejected\";\n  };\n\n  //// BEGIN UNHANDLED REJECTION TRACKING\n\n  // This promise library consumes exceptions thrown in handlers so they can be\n  // handled by a subsequent promise.  The exceptions get added to this array when\n  // they are created, and removed when they are handled.  Note that in ES6 or\n  // shimmed environments, this would naturally be a `Set`.\n  var unhandledReasons = [];\n  var unhandledRejections = [];\n  var reportedUnhandledRejections = [];\n  var trackUnhandledRejections = true;\n  function resetUnhandledRejections() {\n    unhandledReasons.length = 0;\n    unhandledRejections.length = 0;\n    if (!trackUnhandledRejections) {\n      trackUnhandledRejections = true;\n    }\n  }\n  function trackRejection(promise, reason) {\n    if (!trackUnhandledRejections) {\n      return;\n    }\n    if (typeof process === \"object\" && typeof process.emit === \"function\") {\n      Q.nextTick.runAfter(function () {\n        if (array_indexOf(unhandledRejections, promise) !== -1) {\n          process.emit(\"unhandledRejection\", reason, promise);\n          reportedUnhandledRejections.push(promise);\n        }\n      });\n    }\n    unhandledRejections.push(promise);\n    if (reason && typeof reason.stack !== \"undefined\") {\n      unhandledReasons.push(reason.stack);\n    } else {\n      unhandledReasons.push(\"(no stack) \" + reason);\n    }\n  }\n  function untrackRejection(promise) {\n    if (!trackUnhandledRejections) {\n      return;\n    }\n    var at = array_indexOf(unhandledRejections, promise);\n    if (at !== -1) {\n      if (typeof process === \"object\" && typeof process.emit === \"function\") {\n        Q.nextTick.runAfter(function () {\n          var atReport = array_indexOf(reportedUnhandledRejections, promise);\n          if (atReport !== -1) {\n            process.emit(\"rejectionHandled\", unhandledReasons[at], promise);\n            reportedUnhandledRejections.splice(atReport, 1);\n          }\n        });\n      }\n      unhandledRejections.splice(at, 1);\n      unhandledReasons.splice(at, 1);\n    }\n  }\n  Q.resetUnhandledRejections = resetUnhandledRejections;\n  Q.getUnhandledReasons = function () {\n    // Make a copy so that consumers can't interfere with our internal state.\n    return unhandledReasons.slice();\n  };\n  Q.stopUnhandledRejectionTracking = function () {\n    resetUnhandledRejections();\n    trackUnhandledRejections = false;\n  };\n  resetUnhandledRejections();\n\n  //// END UNHANDLED REJECTION TRACKING\n\n  /**\n   * Constructs a rejected promise.\n   * @param reason value describing the failure\n   */\n  Q.reject = reject;\n  function reject(reason) {\n    var rejection = Promise({\n      \"when\": function (rejected) {\n        // note that the error has been handled\n        if (rejected) {\n          untrackRejection(this);\n        }\n        return rejected ? rejected(reason) : this;\n      }\n    }, function fallback() {\n      return this;\n    }, function inspect() {\n      return {\n        state: \"rejected\",\n        reason: reason\n      };\n    });\n\n    // Note that the reason has not been handled.\n    trackRejection(rejection, reason);\n    return rejection;\n  }\n\n  /**\n   * Constructs a fulfilled promise for an immediate reference.\n   * @param value immediate reference\n   */\n  Q.fulfill = fulfill;\n  function fulfill(value) {\n    return Promise({\n      \"when\": function () {\n        return value;\n      },\n      \"get\": function (name) {\n        return value[name];\n      },\n      \"set\": function (name, rhs) {\n        value[name] = rhs;\n      },\n      \"delete\": function (name) {\n        delete value[name];\n      },\n      \"post\": function (name, args) {\n        // Mark Miller proposes that post with no name should apply a\n        // promised function.\n        if (name === null || name === void 0) {\n          return value.apply(void 0, args);\n        } else {\n          return value[name].apply(value, args);\n        }\n      },\n      \"apply\": function (thisp, args) {\n        return value.apply(thisp, args);\n      },\n      \"keys\": function () {\n        return object_keys(value);\n      }\n    }, void 0, function inspect() {\n      return {\n        state: \"fulfilled\",\n        value: value\n      };\n    });\n  }\n\n  /**\n   * Converts thenables to Q promises.\n   * @param promise thenable promise\n   * @returns a Q promise\n   */\n  function coerce(promise) {\n    var deferred = defer();\n    Q.nextTick(function () {\n      try {\n        promise.then(deferred.resolve, deferred.reject, deferred.notify);\n      } catch (exception) {\n        deferred.reject(exception);\n      }\n    });\n    return deferred.promise;\n  }\n\n  /**\n   * Annotates an object such that it will never be\n   * transferred away from this process over any promise\n   * communication channel.\n   * @param object\n   * @returns promise a wrapping of that object that\n   * additionally responds to the \"isDef\" message\n   * without a rejection.\n   */\n  Q.master = master;\n  function master(object) {\n    return Promise({\n      \"isDef\": function () {}\n    }, function fallback(op, args) {\n      return dispatch(object, op, args);\n    }, function () {\n      return Q(object).inspect();\n    });\n  }\n\n  /**\n   * Spreads the values of a promised array of arguments into the\n   * fulfillment callback.\n   * @param fulfilled callback that receives variadic arguments from the\n   * promised array\n   * @param rejected callback that receives the exception if the promise\n   * is rejected.\n   * @returns a promise for the return value or thrown exception of\n   * either callback.\n   */\n  Q.spread = spread;\n  function spread(value, fulfilled, rejected) {\n    return Q(value).spread(fulfilled, rejected);\n  }\n  Promise.prototype.spread = function (fulfilled, rejected) {\n    return this.all().then(function (array) {\n      return fulfilled.apply(void 0, array);\n    }, rejected);\n  };\n\n  /**\n   * The async function is a decorator for generator functions, turning\n   * them into asynchronous generators.  Although generators are only part\n   * of the newest ECMAScript 6 drafts, this code does not cause syntax\n   * errors in older engines.  This code should continue to work and will\n   * in fact improve over time as the language improves.\n   *\n   * ES6 generators are currently part of V8 version 3.19 with the\n   * --harmony-generators runtime flag enabled.  SpiderMonkey has had them\n   * for longer, but under an older Python-inspired form.  This function\n   * works on both kinds of generators.\n   *\n   * Decorates a generator function such that:\n   *  - it may yield promises\n   *  - execution will continue when that promise is fulfilled\n   *  - the value of the yield expression will be the fulfilled value\n   *  - it returns a promise for the return value (when the generator\n   *    stops iterating)\n   *  - the decorated function returns a promise for the return value\n   *    of the generator or the first rejected promise among those\n   *    yielded.\n   *  - if an error is thrown in the generator, it propagates through\n   *    every following yield until it is caught, or until it escapes\n   *    the generator function altogether, and is translated into a\n   *    rejection for the promise returned by the decorated generator.\n   */\n  Q.async = async;\n  function async(makeGenerator) {\n    return function () {\n      // when verb is \"send\", arg is a value\n      // when verb is \"throw\", arg is an exception\n      function continuer(verb, arg) {\n        var result;\n\n        // Until V8 3.19 / Chromium 29 is released, SpiderMonkey is the only\n        // engine that has a deployed base of browsers that support generators.\n        // However, SM's generators use the Python-inspired semantics of\n        // outdated ES6 drafts.  We would like to support ES6, but we'd also\n        // like to make it possible to use generators in deployed browsers, so\n        // we also support Python-style generators.  At some point we can remove\n        // this block.\n\n        if (typeof StopIteration === \"undefined\") {\n          // ES6 Generators\n          try {\n            result = generator[verb](arg);\n          } catch (exception) {\n            return reject(exception);\n          }\n          if (result.done) {\n            return Q(result.value);\n          } else {\n            return when(result.value, callback, errback);\n          }\n        } else {\n          // SpiderMonkey Generators\n          // FIXME: Remove this case when SM does ES6 generators.\n          try {\n            result = generator[verb](arg);\n          } catch (exception) {\n            if (isStopIteration(exception)) {\n              return Q(exception.value);\n            } else {\n              return reject(exception);\n            }\n          }\n          return when(result, callback, errback);\n        }\n      }\n      var generator = makeGenerator.apply(this, arguments);\n      var callback = continuer.bind(continuer, \"next\");\n      var errback = continuer.bind(continuer, \"throw\");\n      return callback();\n    };\n  }\n\n  /**\n   * The spawn function is a small wrapper around async that immediately\n   * calls the generator and also ends the promise chain, so that any\n   * unhandled errors are thrown instead of forwarded to the error\n   * handler. This is useful because it's extremely common to run\n   * generators at the top-level to work with libraries.\n   */\n  Q.spawn = spawn;\n  function spawn(makeGenerator) {\n    Q.done(Q.async(makeGenerator)());\n  }\n\n  // FIXME: Remove this interface once ES6 generators are in SpiderMonkey.\n  /**\n   * Throws a ReturnValue exception to stop an asynchronous generator.\n   *\n   * This interface is a stop-gap measure to support generator return\n   * values in older Firefox/SpiderMonkey.  In browsers that support ES6\n   * generators like Chromium 29, just use \"return\" in your generator\n   * functions.\n   *\n   * @param value the return value for the surrounding generator\n   * @throws ReturnValue exception with the value.\n   * @example\n   * // ES6 style\n   * Q.async(function* () {\n   *      var foo = yield getFooPromise();\n   *      var bar = yield getBarPromise();\n   *      return foo + bar;\n   * })\n   * // Older SpiderMonkey style\n   * Q.async(function () {\n   *      var foo = yield getFooPromise();\n   *      var bar = yield getBarPromise();\n   *      Q.return(foo + bar);\n   * })\n   */\n  Q[\"return\"] = _return;\n  function _return(value) {\n    throw new QReturnValue(value);\n  }\n\n  /**\n   * The promised function decorator ensures that any promise arguments\n   * are settled and passed as values (`this` is also settled and passed\n   * as a value).  It will also ensure that the result of a function is\n   * always a promise.\n   *\n   * @example\n   * var add = Q.promised(function (a, b) {\n   *     return a + b;\n   * });\n   * add(Q(a), Q(B));\n   *\n   * @param {function} callback The function to decorate\n   * @returns {function} a function that has been decorated.\n   */\n  Q.promised = promised;\n  function promised(callback) {\n    return function () {\n      return spread([this, all(arguments)], function (self, args) {\n        return callback.apply(self, args);\n      });\n    };\n  }\n\n  /**\n   * sends a message to a value in a future turn\n   * @param object* the recipient\n   * @param op the name of the message operation, e.g., \"when\",\n   * @param args further arguments to be forwarded to the operation\n   * @returns result {Promise} a promise for the result of the operation\n   */\n  Q.dispatch = dispatch;\n  function dispatch(object, op, args) {\n    return Q(object).dispatch(op, args);\n  }\n  Promise.prototype.dispatch = function (op, args) {\n    var self = this;\n    var deferred = defer();\n    Q.nextTick(function () {\n      self.promiseDispatch(deferred.resolve, op, args);\n    });\n    return deferred.promise;\n  };\n\n  /**\n   * Gets the value of a property in a future turn.\n   * @param object    promise or immediate reference for target object\n   * @param name      name of property to get\n   * @return promise for the property value\n   */\n  Q.get = function (object, key) {\n    return Q(object).dispatch(\"get\", [key]);\n  };\n  Promise.prototype.get = function (key) {\n    return this.dispatch(\"get\", [key]);\n  };\n\n  /**\n   * Sets the value of a property in a future turn.\n   * @param object    promise or immediate reference for object object\n   * @param name      name of property to set\n   * @param value     new value of property\n   * @return promise for the return value\n   */\n  Q.set = function (object, key, value) {\n    return Q(object).dispatch(\"set\", [key, value]);\n  };\n  Promise.prototype.set = function (key, value) {\n    return this.dispatch(\"set\", [key, value]);\n  };\n\n  /**\n   * Deletes a property in a future turn.\n   * @param object    promise or immediate reference for target object\n   * @param name      name of property to delete\n   * @return promise for the return value\n   */\n  Q.del =\n  // XXX legacy\n  Q[\"delete\"] = function (object, key) {\n    return Q(object).dispatch(\"delete\", [key]);\n  };\n  Promise.prototype.del =\n  // XXX legacy\n  Promise.prototype[\"delete\"] = function (key) {\n    return this.dispatch(\"delete\", [key]);\n  };\n\n  /**\n   * Invokes a method in a future turn.\n   * @param object    promise or immediate reference for target object\n   * @param name      name of method to invoke\n   * @param value     a value to post, typically an array of\n   *                  invocation arguments for promises that\n   *                  are ultimately backed with `resolve` values,\n   *                  as opposed to those backed with URLs\n   *                  wherein the posted value can be any\n   *                  JSON serializable object.\n   * @return promise for the return value\n   */\n  // bound locally because it is used by other methods\n  Q.mapply =\n  // XXX As proposed by \"Redsandro\"\n  Q.post = function (object, name, args) {\n    return Q(object).dispatch(\"post\", [name, args]);\n  };\n  Promise.prototype.mapply =\n  // XXX As proposed by \"Redsandro\"\n  Promise.prototype.post = function (name, args) {\n    return this.dispatch(\"post\", [name, args]);\n  };\n\n  /**\n   * Invokes a method in a future turn.\n   * @param object    promise or immediate reference for target object\n   * @param name      name of method to invoke\n   * @param ...args   array of invocation arguments\n   * @return promise for the return value\n   */\n  Q.send =\n  // XXX Mark Miller's proposed parlance\n  Q.mcall =\n  // XXX As proposed by \"Redsandro\"\n  Q.invoke = function (object, name /*...args*/) {\n    return Q(object).dispatch(\"post\", [name, array_slice(arguments, 2)]);\n  };\n  Promise.prototype.send =\n  // XXX Mark Miller's proposed parlance\n  Promise.prototype.mcall =\n  // XXX As proposed by \"Redsandro\"\n  Promise.prototype.invoke = function (name /*...args*/) {\n    return this.dispatch(\"post\", [name, array_slice(arguments, 1)]);\n  };\n\n  /**\n   * Applies the promised function in a future turn.\n   * @param object    promise or immediate reference for target function\n   * @param args      array of application arguments\n   */\n  Q.fapply = function (object, args) {\n    return Q(object).dispatch(\"apply\", [void 0, args]);\n  };\n  Promise.prototype.fapply = function (args) {\n    return this.dispatch(\"apply\", [void 0, args]);\n  };\n\n  /**\n   * Calls the promised function in a future turn.\n   * @param object    promise or immediate reference for target function\n   * @param ...args   array of application arguments\n   */\n  Q[\"try\"] = Q.fcall = function (object /* ...args*/) {\n    return Q(object).dispatch(\"apply\", [void 0, array_slice(arguments, 1)]);\n  };\n  Promise.prototype.fcall = function /*...args*/\n  () {\n    return this.dispatch(\"apply\", [void 0, array_slice(arguments)]);\n  };\n\n  /**\n   * Binds the promised function, transforming return values into a fulfilled\n   * promise and thrown errors into a rejected one.\n   * @param object    promise or immediate reference for target function\n   * @param ...args   array of application arguments\n   */\n  Q.fbind = function (object /*...args*/) {\n    var promise = Q(object);\n    var args = array_slice(arguments, 1);\n    return function fbound() {\n      return promise.dispatch(\"apply\", [this, args.concat(array_slice(arguments))]);\n    };\n  };\n  Promise.prototype.fbind = function /*...args*/\n  () {\n    var promise = this;\n    var args = array_slice(arguments);\n    return function fbound() {\n      return promise.dispatch(\"apply\", [this, args.concat(array_slice(arguments))]);\n    };\n  };\n\n  /**\n   * Requests the names of the owned properties of a promised\n   * object in a future turn.\n   * @param object    promise or immediate reference for target object\n   * @return promise for the keys of the eventually settled object\n   */\n  Q.keys = function (object) {\n    return Q(object).dispatch(\"keys\", []);\n  };\n  Promise.prototype.keys = function () {\n    return this.dispatch(\"keys\", []);\n  };\n\n  /**\n   * Turns an array of promises into a promise for an array.  If any of\n   * the promises gets rejected, the whole array is rejected immediately.\n   * @param {Array*} an array (or promise for an array) of values (or\n   * promises for values)\n   * @returns a promise for an array of the corresponding values\n   */\n  // By Mark Miller\n  // http://wiki.ecmascript.org/doku.php?id=strawman:concurrency&rev=1308776521#allfulfilled\n  Q.all = all;\n  function all(promises) {\n    return when(promises, function (promises) {\n      var pendingCount = 0;\n      var deferred = defer();\n      array_reduce(promises, function (undefined, promise, index) {\n        var snapshot;\n        if (isPromise(promise) && (snapshot = promise.inspect()).state === \"fulfilled\") {\n          promises[index] = snapshot.value;\n        } else {\n          ++pendingCount;\n          when(promise, function (value) {\n            promises[index] = value;\n            if (--pendingCount === 0) {\n              deferred.resolve(promises);\n            }\n          }, deferred.reject, function (progress) {\n            deferred.notify({\n              index: index,\n              value: progress\n            });\n          });\n        }\n      }, void 0);\n      if (pendingCount === 0) {\n        deferred.resolve(promises);\n      }\n      return deferred.promise;\n    });\n  }\n  Promise.prototype.all = function () {\n    return all(this);\n  };\n\n  /**\n   * Returns the first resolved promise of an array. Prior rejected promises are\n   * ignored.  Rejects only if all promises are rejected.\n   * @param {Array*} an array containing values or promises for values\n   * @returns a promise fulfilled with the value of the first resolved promise,\n   * or a rejected promise if all promises are rejected.\n   */\n  Q.any = any;\n  function any(promises) {\n    if (promises.length === 0) {\n      return Q.resolve();\n    }\n    var deferred = Q.defer();\n    var pendingCount = 0;\n    array_reduce(promises, function (prev, current, index) {\n      var promise = promises[index];\n      pendingCount++;\n      when(promise, onFulfilled, onRejected, onProgress);\n      function onFulfilled(result) {\n        deferred.resolve(result);\n      }\n      function onRejected(err) {\n        pendingCount--;\n        if (pendingCount === 0) {\n          var rejection = err || new Error(\"\" + err);\n          rejection.message = \"Q can't get fulfillment value from any promise, all \" + \"promises were rejected. Last error message: \" + rejection.message;\n          deferred.reject(rejection);\n        }\n      }\n      function onProgress(progress) {\n        deferred.notify({\n          index: index,\n          value: progress\n        });\n      }\n    }, undefined);\n    return deferred.promise;\n  }\n  Promise.prototype.any = function () {\n    return any(this);\n  };\n\n  /**\n   * Waits for all promises to be settled, either fulfilled or\n   * rejected.  This is distinct from `all` since that would stop\n   * waiting at the first rejection.  The promise returned by\n   * `allResolved` will never be rejected.\n   * @param promises a promise for an array (or an array) of promises\n   * (or values)\n   * @return a promise for an array of promises\n   */\n  Q.allResolved = deprecate(allResolved, \"allResolved\", \"allSettled\");\n  function allResolved(promises) {\n    return when(promises, function (promises) {\n      promises = array_map(promises, Q);\n      return when(all(array_map(promises, function (promise) {\n        return when(promise, noop, noop);\n      })), function () {\n        return promises;\n      });\n    });\n  }\n  Promise.prototype.allResolved = function () {\n    return allResolved(this);\n  };\n\n  /**\n   * @see Promise#allSettled\n   */\n  Q.allSettled = allSettled;\n  function allSettled(promises) {\n    return Q(promises).allSettled();\n  }\n\n  /**\n   * Turns an array of promises into a promise for an array of their states (as\n   * returned by `inspect`) when they have all settled.\n   * @param {Array[Any*]} values an array (or promise for an array) of values (or\n   * promises for values)\n   * @returns {Array[State]} an array of states for the respective values.\n   */\n  Promise.prototype.allSettled = function () {\n    return this.then(function (promises) {\n      return all(array_map(promises, function (promise) {\n        promise = Q(promise);\n        function regardless() {\n          return promise.inspect();\n        }\n        return promise.then(regardless, regardless);\n      }));\n    });\n  };\n\n  /**\n   * Captures the failure of a promise, giving an oportunity to recover\n   * with a callback.  If the given promise is fulfilled, the returned\n   * promise is fulfilled.\n   * @param {Any*} promise for something\n   * @param {Function} callback to fulfill the returned promise if the\n   * given promise is rejected\n   * @returns a promise for the return value of the callback\n   */\n  Q.fail =\n  // XXX legacy\n  Q[\"catch\"] = function (object, rejected) {\n    return Q(object).then(void 0, rejected);\n  };\n  Promise.prototype.fail =\n  // XXX legacy\n  Promise.prototype[\"catch\"] = function (rejected) {\n    return this.then(void 0, rejected);\n  };\n\n  /**\n   * Attaches a listener that can respond to progress notifications from a\n   * promise's originating deferred. This listener receives the exact arguments\n   * passed to ``deferred.notify``.\n   * @param {Any*} promise for something\n   * @param {Function} callback to receive any progress notifications\n   * @returns the given promise, unchanged\n   */\n  Q.progress = progress;\n  function progress(object, progressed) {\n    return Q(object).then(void 0, void 0, progressed);\n  }\n  Promise.prototype.progress = function (progressed) {\n    return this.then(void 0, void 0, progressed);\n  };\n\n  /**\n   * Provides an opportunity to observe the settling of a promise,\n   * regardless of whether the promise is fulfilled or rejected.  Forwards\n   * the resolution to the returned promise when the callback is done.\n   * The callback can return a promise to defer completion.\n   * @param {Any*} promise\n   * @param {Function} callback to observe the resolution of the given\n   * promise, takes no arguments.\n   * @returns a promise for the resolution of the given promise when\n   * ``fin`` is done.\n   */\n  Q.fin =\n  // XXX legacy\n  Q[\"finally\"] = function (object, callback) {\n    return Q(object)[\"finally\"](callback);\n  };\n  Promise.prototype.fin =\n  // XXX legacy\n  Promise.prototype[\"finally\"] = function (callback) {\n    if (!callback || typeof callback.apply !== \"function\") {\n      throw new Error(\"Q can't apply finally callback\");\n    }\n    callback = Q(callback);\n    return this.then(function (value) {\n      return callback.fcall().then(function () {\n        return value;\n      });\n    }, function (reason) {\n      // TODO attempt to recycle the rejection with \"this\".\n      return callback.fcall().then(function () {\n        throw reason;\n      });\n    });\n  };\n\n  /**\n   * Terminates a chain of promises, forcing rejections to be\n   * thrown as exceptions.\n   * @param {Any*} promise at the end of a chain of promises\n   * @returns nothing\n   */\n  Q.done = function (object, fulfilled, rejected, progress) {\n    return Q(object).done(fulfilled, rejected, progress);\n  };\n  Promise.prototype.done = function (fulfilled, rejected, progress) {\n    var onUnhandledError = function (error) {\n      // forward to a future turn so that ``when``\n      // does not catch it and turn it into a rejection.\n      Q.nextTick(function () {\n        makeStackTraceLong(error, promise);\n        if (Q.onerror) {\n          Q.onerror(error);\n        } else {\n          throw error;\n        }\n      });\n    };\n\n    // Avoid unnecessary `nextTick`ing via an unnecessary `when`.\n    var promise = fulfilled || rejected || progress ? this.then(fulfilled, rejected, progress) : this;\n    if (typeof process === \"object\" && process && process.domain) {\n      onUnhandledError = process.domain.bind(onUnhandledError);\n    }\n    promise.then(void 0, onUnhandledError);\n  };\n\n  /**\n   * Causes a promise to be rejected if it does not get fulfilled before\n   * some milliseconds time out.\n   * @param {Any*} promise\n   * @param {Number} milliseconds timeout\n   * @param {Any*} custom error message or Error object (optional)\n   * @returns a promise for the resolution of the given promise if it is\n   * fulfilled before the timeout, otherwise rejected.\n   */\n  Q.timeout = function (object, ms, error) {\n    return Q(object).timeout(ms, error);\n  };\n  Promise.prototype.timeout = function (ms, error) {\n    var deferred = defer();\n    var timeoutId = setTimeout(function () {\n      if (!error || \"string\" === typeof error) {\n        error = new Error(error || \"Timed out after \" + ms + \" ms\");\n        error.code = \"ETIMEDOUT\";\n      }\n      deferred.reject(error);\n    }, ms);\n    this.then(function (value) {\n      clearTimeout(timeoutId);\n      deferred.resolve(value);\n    }, function (exception) {\n      clearTimeout(timeoutId);\n      deferred.reject(exception);\n    }, deferred.notify);\n    return deferred.promise;\n  };\n\n  /**\n   * Returns a promise for the given value (or promised value), some\n   * milliseconds after it resolved. Passes rejections immediately.\n   * @param {Any*} promise\n   * @param {Number} milliseconds\n   * @returns a promise for the resolution of the given promise after milliseconds\n   * time has elapsed since the resolution of the given promise.\n   * If the given promise rejects, that is passed immediately.\n   */\n  Q.delay = function (object, timeout) {\n    if (timeout === void 0) {\n      timeout = object;\n      object = void 0;\n    }\n    return Q(object).delay(timeout);\n  };\n  Promise.prototype.delay = function (timeout) {\n    return this.then(function (value) {\n      var deferred = defer();\n      setTimeout(function () {\n        deferred.resolve(value);\n      }, timeout);\n      return deferred.promise;\n    });\n  };\n\n  /**\n   * Passes a continuation to a Node function, which is called with the given\n   * arguments provided as an array, and returns a promise.\n   *\n   *      Q.nfapply(FS.readFile, [__filename])\n   *      .then(function (content) {\n   *      })\n   *\n   */\n  Q.nfapply = function (callback, args) {\n    return Q(callback).nfapply(args);\n  };\n  Promise.prototype.nfapply = function (args) {\n    var deferred = defer();\n    var nodeArgs = array_slice(args);\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.fapply(nodeArgs).fail(deferred.reject);\n    return deferred.promise;\n  };\n\n  /**\n   * Passes a continuation to a Node function, which is called with the given\n   * arguments provided individually, and returns a promise.\n   * @example\n   * Q.nfcall(FS.readFile, __filename)\n   * .then(function (content) {\n   * })\n   *\n   */\n  Q.nfcall = function (callback /*...args*/) {\n    var args = array_slice(arguments, 1);\n    return Q(callback).nfapply(args);\n  };\n  Promise.prototype.nfcall = function /*...args*/\n  () {\n    var nodeArgs = array_slice(arguments);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.fapply(nodeArgs).fail(deferred.reject);\n    return deferred.promise;\n  };\n\n  /**\n   * Wraps a NodeJS continuation passing function and returns an equivalent\n   * version that returns a promise.\n   * @example\n   * Q.nfbind(FS.readFile, __filename)(\"utf-8\")\n   * .then(console.log)\n   * .done()\n   */\n  Q.nfbind = Q.denodeify = function (callback /*...args*/) {\n    if (callback === undefined) {\n      throw new Error(\"Q can't wrap an undefined function\");\n    }\n    var baseArgs = array_slice(arguments, 1);\n    return function () {\n      var nodeArgs = baseArgs.concat(array_slice(arguments));\n      var deferred = defer();\n      nodeArgs.push(deferred.makeNodeResolver());\n      Q(callback).fapply(nodeArgs).fail(deferred.reject);\n      return deferred.promise;\n    };\n  };\n  Promise.prototype.nfbind = Promise.prototype.denodeify = function /*...args*/\n  () {\n    var args = array_slice(arguments);\n    args.unshift(this);\n    return Q.denodeify.apply(void 0, args);\n  };\n  Q.nbind = function (callback, thisp /*...args*/) {\n    var baseArgs = array_slice(arguments, 2);\n    return function () {\n      var nodeArgs = baseArgs.concat(array_slice(arguments));\n      var deferred = defer();\n      nodeArgs.push(deferred.makeNodeResolver());\n      function bound() {\n        return callback.apply(thisp, arguments);\n      }\n      Q(bound).fapply(nodeArgs).fail(deferred.reject);\n      return deferred.promise;\n    };\n  };\n  Promise.prototype.nbind = function /*thisp, ...args*/\n  () {\n    var args = array_slice(arguments, 0);\n    args.unshift(this);\n    return Q.nbind.apply(void 0, args);\n  };\n\n  /**\n   * Calls a method of a Node-style object that accepts a Node-style\n   * callback with a given array of arguments, plus a provided callback.\n   * @param object an object that has the named method\n   * @param {String} name name of the method of object\n   * @param {Array} args arguments to pass to the method; the callback\n   * will be provided by Q and appended to these arguments.\n   * @returns a promise for the value or error\n   */\n  Q.nmapply =\n  // XXX As proposed by \"Redsandro\"\n  Q.npost = function (object, name, args) {\n    return Q(object).npost(name, args);\n  };\n  Promise.prototype.nmapply =\n  // XXX As proposed by \"Redsandro\"\n  Promise.prototype.npost = function (name, args) {\n    var nodeArgs = array_slice(args || []);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n    return deferred.promise;\n  };\n\n  /**\n   * Calls a method of a Node-style object that accepts a Node-style\n   * callback, forwarding the given variadic arguments, plus a provided\n   * callback argument.\n   * @param object an object that has the named method\n   * @param {String} name name of the method of object\n   * @param ...args arguments to pass to the method; the callback will\n   * be provided by Q and appended to these arguments.\n   * @returns a promise for the value or error\n   */\n  Q.nsend =\n  // XXX Based on Mark Miller's proposed \"send\"\n  Q.nmcall =\n  // XXX Based on \"Redsandro's\" proposal\n  Q.ninvoke = function (object, name /*...args*/) {\n    var nodeArgs = array_slice(arguments, 2);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    Q(object).dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n    return deferred.promise;\n  };\n  Promise.prototype.nsend =\n  // XXX Based on Mark Miller's proposed \"send\"\n  Promise.prototype.nmcall =\n  // XXX Based on \"Redsandro's\" proposal\n  Promise.prototype.ninvoke = function (name /*...args*/) {\n    var nodeArgs = array_slice(arguments, 1);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n    return deferred.promise;\n  };\n\n  /**\n   * If a function would like to support both Node continuation-passing-style and\n   * promise-returning-style, it can end its internal promise chain with\n   * `nodeify(nodeback)`, forwarding the optional nodeback argument.  If the user\n   * elects to use a nodeback, the result will be sent there.  If they do not\n   * pass a nodeback, they will receive the result promise.\n   * @param object a result (or a promise for a result)\n   * @param {Function} nodeback a Node.js-style callback\n   * @returns either the promise or nothing\n   */\n  Q.nodeify = nodeify;\n  function nodeify(object, nodeback) {\n    return Q(object).nodeify(nodeback);\n  }\n  Promise.prototype.nodeify = function (nodeback) {\n    if (nodeback) {\n      this.then(function (value) {\n        Q.nextTick(function () {\n          nodeback(null, value);\n        });\n      }, function (error) {\n        Q.nextTick(function () {\n          nodeback(error);\n        });\n      });\n    } else {\n      return this;\n    }\n  };\n  Q.noConflict = function () {\n    throw new Error(\"Q.noConflict only works when Q is used as a global\");\n  };\n\n  // All code before this point will be filtered from stack traces.\n  var qEndingLine = captureLine();\n  return Q;\n});","map":{"version":3,"names":["definition","bootstrap","exports","module","define","amd","ses","ok","makeQ","window","self","global","previousQ","Q","noConflict","Error","hasStacks","e","stack","qStartingLine","captureLine","qFileName","noop","nextTick","head","task","next","tail","flushing","requestTick","isNodeJS","laterQueue","flush","domain","enter","runSingle","length","pop","exit","setTimeout","process","toString","setImmediate","bind","MessageChannel","channel","port1","onmessage","requestPortTick","port2","postMessage","runAfter","push","call","Function","uncurryThis","f","apply","arguments","array_slice","Array","prototype","slice","array_reduce","reduce","callback","basis","index","TypeError","array_indexOf","indexOf","value","i","array_map","map","thisp","collect","undefined","object_create","Object","create","Type","object_defineProperty","defineProperty","obj","prop","descriptor","object_hasOwnProperty","hasOwnProperty","object_keys","keys","object","key","object_toString","isObject","isStopIteration","exception","QReturnValue","ReturnValue","STACK_JUMP_SEPARATOR","makeStackTraceLong","error","promise","stacks","p","source","__minimumStackCounter__","stackCounter","configurable","unshift","concatedStacks","join","filterStackString","stackString","lines","split","desiredLines","line","isInternalFrame","isNodeFrame","stackLine","getFileNameAndLineNumber","attempt1","exec","Number","attempt2","attempt3","fileNameAndLineNumber","fileName","lineNumber","qEndingLine","firstLine","deprecate","name","alternative","console","warn","Promise","isPromiseAlike","coerce","fulfill","resolve","longStackSupport","longStackCounter","env","Q_DEBUG","defer","messages","progressListeners","resolvedPromise","deferred","promiseDispatch","op","operands","args","valueOf","nearerValue","nearer","isPromise","inspect","state","substring","become","newPromise","message","reject","reason","notify","progress","progressListener","makeNodeResolver","resolver","race","all","passByCopy","x","y","that","spread","answerPs","len","then","makePromise","fallback","result","inspected","fulfilled","rejected","progressed","done","_fulfilled","_rejected","newException","_progressed","newValue","threw","onerror","tap","fcall","thenResolve","when","thenReject","isPending","isFulfilled","isRejected","unhandledReasons","unhandledRejections","reportedUnhandledRejections","trackUnhandledRejections","resetUnhandledRejections","trackRejection","emit","untrackRejection","at","atReport","splice","getUnhandledReasons","stopUnhandledRejectionTracking","rejection","get","set","rhs","delete","post","master","isDef","dispatch","array","async","makeGenerator","continuer","verb","arg","StopIteration","generator","errback","spawn","_return","promised","del","mapply","send","mcall","invoke","fapply","fbind","fbound","concat","promises","pendingCount","snapshot","any","prev","current","onFulfilled","onRejected","onProgress","err","allResolved","allSettled","regardless","fail","fin","onUnhandledError","timeout","ms","timeoutId","code","clearTimeout","delay","nfapply","nodeArgs","nfcall","nfbind","denodeify","baseArgs","nbind","bound","nmapply","npost","nsend","nmcall","ninvoke","nodeify","nodeback"],"sources":["/home/user/phase5proj/proj/node_modules/q/q.js"],"sourcesContent":["// vim:ts=4:sts=4:sw=4:\n/*!\n *\n * Copyright 2009-2017 Kris Kowal under the terms of the MIT\n * license found at https://github.com/kriskowal/q/blob/v1/LICENSE\n *\n * With parts by Tyler Close\n * Copyright 2007-2009 Tyler Close under the terms of the MIT X license found\n * at http://www.opensource.org/licenses/mit-license.html\n * Forked at ref_send.js version: 2009-05-11\n *\n * With parts by Mark Miller\n * Copyright (C) 2011 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\n(function (definition) {\n    \"use strict\";\n\n    // This file will function properly as a <script> tag, or a module\n    // using CommonJS and NodeJS or RequireJS module formats.  In\n    // Common/Node/RequireJS, the module exports the Q API and when\n    // executed as a simple <script>, it creates a Q global instead.\n\n    // Montage Require\n    if (typeof bootstrap === \"function\") {\n        bootstrap(\"promise\", definition);\n\n    // CommonJS\n    } else if (typeof exports === \"object\" && typeof module === \"object\") {\n        module.exports = definition();\n\n    // RequireJS\n    } else if (typeof define === \"function\" && define.amd) {\n        define(definition);\n\n    // SES (Secure EcmaScript)\n    } else if (typeof ses !== \"undefined\") {\n        if (!ses.ok()) {\n            return;\n        } else {\n            ses.makeQ = definition;\n        }\n\n    // <script>\n    } else if (typeof window !== \"undefined\" || typeof self !== \"undefined\") {\n        // Prefer window over self for add-on scripts. Use self for\n        // non-windowed contexts.\n        var global = typeof window !== \"undefined\" ? window : self;\n\n        // Get the `window` object, save the previous Q global\n        // and initialize Q as a global.\n        var previousQ = global.Q;\n        global.Q = definition();\n\n        // Add a noConflict function so Q can be removed from the\n        // global namespace.\n        global.Q.noConflict = function () {\n            global.Q = previousQ;\n            return this;\n        };\n\n    } else {\n        throw new Error(\"This environment was not anticipated by Q. Please file a bug.\");\n    }\n\n})(function () {\n\"use strict\";\n\nvar hasStacks = false;\ntry {\n    throw new Error();\n} catch (e) {\n    hasStacks = !!e.stack;\n}\n\n// All code after this point will be filtered from stack traces reported\n// by Q.\nvar qStartingLine = captureLine();\nvar qFileName;\n\n// shims\n\n// used for fallback in \"allResolved\"\nvar noop = function () {};\n\n// Use the fastest possible means to execute a task in a future turn\n// of the event loop.\nvar nextTick =(function () {\n    // linked list of tasks (single, with head node)\n    var head = {task: void 0, next: null};\n    var tail = head;\n    var flushing = false;\n    var requestTick = void 0;\n    var isNodeJS = false;\n    // queue for late tasks, used by unhandled rejection tracking\n    var laterQueue = [];\n\n    function flush() {\n        /* jshint loopfunc: true */\n        var task, domain;\n\n        while (head.next) {\n            head = head.next;\n            task = head.task;\n            head.task = void 0;\n            domain = head.domain;\n\n            if (domain) {\n                head.domain = void 0;\n                domain.enter();\n            }\n            runSingle(task, domain);\n\n        }\n        while (laterQueue.length) {\n            task = laterQueue.pop();\n            runSingle(task);\n        }\n        flushing = false;\n    }\n    // runs a single function in the async queue\n    function runSingle(task, domain) {\n        try {\n            task();\n\n        } catch (e) {\n            if (isNodeJS) {\n                // In node, uncaught exceptions are considered fatal errors.\n                // Re-throw them synchronously to interrupt flushing!\n\n                // Ensure continuation if the uncaught exception is suppressed\n                // listening \"uncaughtException\" events (as domains does).\n                // Continue in next event to avoid tick recursion.\n                if (domain) {\n                    domain.exit();\n                }\n                setTimeout(flush, 0);\n                if (domain) {\n                    domain.enter();\n                }\n\n                throw e;\n\n            } else {\n                // In browsers, uncaught exceptions are not fatal.\n                // Re-throw them asynchronously to avoid slow-downs.\n                setTimeout(function () {\n                    throw e;\n                }, 0);\n            }\n        }\n\n        if (domain) {\n            domain.exit();\n        }\n    }\n\n    nextTick = function (task) {\n        tail = tail.next = {\n            task: task,\n            domain: isNodeJS && process.domain,\n            next: null\n        };\n\n        if (!flushing) {\n            flushing = true;\n            requestTick();\n        }\n    };\n\n    if (typeof process === \"object\" &&\n        process.toString() === \"[object process]\" && process.nextTick) {\n        // Ensure Q is in a real Node environment, with a `process.nextTick`.\n        // To see through fake Node environments:\n        // * Mocha test runner - exposes a `process` global without a `nextTick`\n        // * Browserify - exposes a `process.nexTick` function that uses\n        //   `setTimeout`. In this case `setImmediate` is preferred because\n        //    it is faster. Browserify's `process.toString()` yields\n        //   \"[object Object]\", while in a real Node environment\n        //   `process.toString()` yields \"[object process]\".\n        isNodeJS = true;\n\n        requestTick = function () {\n            process.nextTick(flush);\n        };\n\n    } else if (typeof setImmediate === \"function\") {\n        // In IE10, Node.js 0.9+, or https://github.com/NobleJS/setImmediate\n        if (typeof window !== \"undefined\") {\n            requestTick = setImmediate.bind(window, flush);\n        } else {\n            requestTick = function () {\n                setImmediate(flush);\n            };\n        }\n\n    } else if (typeof MessageChannel !== \"undefined\") {\n        // modern browsers\n        // http://www.nonblocking.io/2011/06/windownexttick.html\n        var channel = new MessageChannel();\n        // At least Safari Version 6.0.5 (8536.30.1) intermittently cannot create\n        // working message ports the first time a page loads.\n        channel.port1.onmessage = function () {\n            requestTick = requestPortTick;\n            channel.port1.onmessage = flush;\n            flush();\n        };\n        var requestPortTick = function () {\n            // Opera requires us to provide a message payload, regardless of\n            // whether we use it.\n            channel.port2.postMessage(0);\n        };\n        requestTick = function () {\n            setTimeout(flush, 0);\n            requestPortTick();\n        };\n\n    } else {\n        // old browsers\n        requestTick = function () {\n            setTimeout(flush, 0);\n        };\n    }\n    // runs a task after all other tasks have been run\n    // this is useful for unhandled rejection tracking that needs to happen\n    // after all `then`d tasks have been run.\n    nextTick.runAfter = function (task) {\n        laterQueue.push(task);\n        if (!flushing) {\n            flushing = true;\n            requestTick();\n        }\n    };\n    return nextTick;\n})();\n\n// Attempt to make generics safe in the face of downstream\n// modifications.\n// There is no situation where this is necessary.\n// If you need a security guarantee, these primordials need to be\n// deeply frozen anyway, and if you don’t need a security guarantee,\n// this is just plain paranoid.\n// However, this **might** have the nice side-effect of reducing the size of\n// the minified code by reducing x.call() to merely x()\n// See Mark Miller’s explanation of what this does.\n// http://wiki.ecmascript.org/doku.php?id=conventions:safe_meta_programming\nvar call = Function.call;\nfunction uncurryThis(f) {\n    return function () {\n        return call.apply(f, arguments);\n    };\n}\n// This is equivalent, but slower:\n// uncurryThis = Function_bind.bind(Function_bind.call);\n// http://jsperf.com/uncurrythis\n\nvar array_slice = uncurryThis(Array.prototype.slice);\n\nvar array_reduce = uncurryThis(\n    Array.prototype.reduce || function (callback, basis) {\n        var index = 0,\n            length = this.length;\n        // concerning the initial value, if one is not provided\n        if (arguments.length === 1) {\n            // seek to the first value in the array, accounting\n            // for the possibility that is is a sparse array\n            do {\n                if (index in this) {\n                    basis = this[index++];\n                    break;\n                }\n                if (++index >= length) {\n                    throw new TypeError();\n                }\n            } while (1);\n        }\n        // reduce\n        for (; index < length; index++) {\n            // account for the possibility that the array is sparse\n            if (index in this) {\n                basis = callback(basis, this[index], index);\n            }\n        }\n        return basis;\n    }\n);\n\nvar array_indexOf = uncurryThis(\n    Array.prototype.indexOf || function (value) {\n        // not a very good shim, but good enough for our one use of it\n        for (var i = 0; i < this.length; i++) {\n            if (this[i] === value) {\n                return i;\n            }\n        }\n        return -1;\n    }\n);\n\nvar array_map = uncurryThis(\n    Array.prototype.map || function (callback, thisp) {\n        var self = this;\n        var collect = [];\n        array_reduce(self, function (undefined, value, index) {\n            collect.push(callback.call(thisp, value, index, self));\n        }, void 0);\n        return collect;\n    }\n);\n\nvar object_create = Object.create || function (prototype) {\n    function Type() { }\n    Type.prototype = prototype;\n    return new Type();\n};\n\nvar object_defineProperty = Object.defineProperty || function (obj, prop, descriptor) {\n    obj[prop] = descriptor.value;\n    return obj;\n};\n\nvar object_hasOwnProperty = uncurryThis(Object.prototype.hasOwnProperty);\n\nvar object_keys = Object.keys || function (object) {\n    var keys = [];\n    for (var key in object) {\n        if (object_hasOwnProperty(object, key)) {\n            keys.push(key);\n        }\n    }\n    return keys;\n};\n\nvar object_toString = uncurryThis(Object.prototype.toString);\n\nfunction isObject(value) {\n    return value === Object(value);\n}\n\n// generator related shims\n\n// FIXME: Remove this function once ES6 generators are in SpiderMonkey.\nfunction isStopIteration(exception) {\n    return (\n        object_toString(exception) === \"[object StopIteration]\" ||\n        exception instanceof QReturnValue\n    );\n}\n\n// FIXME: Remove this helper and Q.return once ES6 generators are in\n// SpiderMonkey.\nvar QReturnValue;\nif (typeof ReturnValue !== \"undefined\") {\n    QReturnValue = ReturnValue;\n} else {\n    QReturnValue = function (value) {\n        this.value = value;\n    };\n}\n\n// long stack traces\n\nvar STACK_JUMP_SEPARATOR = \"From previous event:\";\n\nfunction makeStackTraceLong(error, promise) {\n    // If possible, transform the error stack trace by removing Node and Q\n    // cruft, then concatenating with the stack trace of `promise`. See #57.\n    if (hasStacks &&\n        promise.stack &&\n        typeof error === \"object\" &&\n        error !== null &&\n        error.stack\n    ) {\n        var stacks = [];\n        for (var p = promise; !!p; p = p.source) {\n            if (p.stack && (!error.__minimumStackCounter__ || error.__minimumStackCounter__ > p.stackCounter)) {\n                object_defineProperty(error, \"__minimumStackCounter__\", {value: p.stackCounter, configurable: true});\n                stacks.unshift(p.stack);\n            }\n        }\n        stacks.unshift(error.stack);\n\n        var concatedStacks = stacks.join(\"\\n\" + STACK_JUMP_SEPARATOR + \"\\n\");\n        var stack = filterStackString(concatedStacks);\n        object_defineProperty(error, \"stack\", {value: stack, configurable: true});\n    }\n}\n\nfunction filterStackString(stackString) {\n    var lines = stackString.split(\"\\n\");\n    var desiredLines = [];\n    for (var i = 0; i < lines.length; ++i) {\n        var line = lines[i];\n\n        if (!isInternalFrame(line) && !isNodeFrame(line) && line) {\n            desiredLines.push(line);\n        }\n    }\n    return desiredLines.join(\"\\n\");\n}\n\nfunction isNodeFrame(stackLine) {\n    return stackLine.indexOf(\"(module.js:\") !== -1 ||\n           stackLine.indexOf(\"(node.js:\") !== -1;\n}\n\nfunction getFileNameAndLineNumber(stackLine) {\n    // Named functions: \"at functionName (filename:lineNumber:columnNumber)\"\n    // In IE10 function name can have spaces (\"Anonymous function\") O_o\n    var attempt1 = /at .+ \\((.+):(\\d+):(?:\\d+)\\)$/.exec(stackLine);\n    if (attempt1) {\n        return [attempt1[1], Number(attempt1[2])];\n    }\n\n    // Anonymous functions: \"at filename:lineNumber:columnNumber\"\n    var attempt2 = /at ([^ ]+):(\\d+):(?:\\d+)$/.exec(stackLine);\n    if (attempt2) {\n        return [attempt2[1], Number(attempt2[2])];\n    }\n\n    // Firefox style: \"function@filename:lineNumber or @filename:lineNumber\"\n    var attempt3 = /.*@(.+):(\\d+)$/.exec(stackLine);\n    if (attempt3) {\n        return [attempt3[1], Number(attempt3[2])];\n    }\n}\n\nfunction isInternalFrame(stackLine) {\n    var fileNameAndLineNumber = getFileNameAndLineNumber(stackLine);\n\n    if (!fileNameAndLineNumber) {\n        return false;\n    }\n\n    var fileName = fileNameAndLineNumber[0];\n    var lineNumber = fileNameAndLineNumber[1];\n\n    return fileName === qFileName &&\n        lineNumber >= qStartingLine &&\n        lineNumber <= qEndingLine;\n}\n\n// discover own file name and line number range for filtering stack\n// traces\nfunction captureLine() {\n    if (!hasStacks) {\n        return;\n    }\n\n    try {\n        throw new Error();\n    } catch (e) {\n        var lines = e.stack.split(\"\\n\");\n        var firstLine = lines[0].indexOf(\"@\") > 0 ? lines[1] : lines[2];\n        var fileNameAndLineNumber = getFileNameAndLineNumber(firstLine);\n        if (!fileNameAndLineNumber) {\n            return;\n        }\n\n        qFileName = fileNameAndLineNumber[0];\n        return fileNameAndLineNumber[1];\n    }\n}\n\nfunction deprecate(callback, name, alternative) {\n    return function () {\n        if (typeof console !== \"undefined\" &&\n            typeof console.warn === \"function\") {\n            console.warn(name + \" is deprecated, use \" + alternative +\n                         \" instead.\", new Error(\"\").stack);\n        }\n        return callback.apply(callback, arguments);\n    };\n}\n\n// end of shims\n// beginning of real work\n\n/**\n * Constructs a promise for an immediate reference, passes promises through, or\n * coerces promises from different systems.\n * @param value immediate reference or promise\n */\nfunction Q(value) {\n    // If the object is already a Promise, return it directly.  This enables\n    // the resolve function to both be used to created references from objects,\n    // but to tolerably coerce non-promises to promises.\n    if (value instanceof Promise) {\n        return value;\n    }\n\n    // assimilate thenables\n    if (isPromiseAlike(value)) {\n        return coerce(value);\n    } else {\n        return fulfill(value);\n    }\n}\nQ.resolve = Q;\n\n/**\n * Performs a task in a future turn of the event loop.\n * @param {Function} task\n */\nQ.nextTick = nextTick;\n\n/**\n * Controls whether or not long stack traces will be on\n */\nQ.longStackSupport = false;\n\n/**\n * The counter is used to determine the stopping point for building\n * long stack traces. In makeStackTraceLong we walk backwards through\n * the linked list of promises, only stacks which were created before\n * the rejection are concatenated.\n */\nvar longStackCounter = 1;\n\n// enable long stacks if Q_DEBUG is set\nif (typeof process === \"object\" && process && process.env && process.env.Q_DEBUG) {\n    Q.longStackSupport = true;\n}\n\n/**\n * Constructs a {promise, resolve, reject} object.\n *\n * `resolve` is a callback to invoke with a more resolved value for the\n * promise. To fulfill the promise, invoke `resolve` with any value that is\n * not a thenable. To reject the promise, invoke `resolve` with a rejected\n * thenable, or invoke `reject` with the reason directly. To resolve the\n * promise to another thenable, thus putting it in the same state, invoke\n * `resolve` with that other thenable.\n */\nQ.defer = defer;\nfunction defer() {\n    // if \"messages\" is an \"Array\", that indicates that the promise has not yet\n    // been resolved.  If it is \"undefined\", it has been resolved.  Each\n    // element of the messages array is itself an array of complete arguments to\n    // forward to the resolved promise.  We coerce the resolution value to a\n    // promise using the `resolve` function because it handles both fully\n    // non-thenable values and other thenables gracefully.\n    var messages = [], progressListeners = [], resolvedPromise;\n\n    var deferred = object_create(defer.prototype);\n    var promise = object_create(Promise.prototype);\n\n    promise.promiseDispatch = function (resolve, op, operands) {\n        var args = array_slice(arguments);\n        if (messages) {\n            messages.push(args);\n            if (op === \"when\" && operands[1]) { // progress operand\n                progressListeners.push(operands[1]);\n            }\n        } else {\n            Q.nextTick(function () {\n                resolvedPromise.promiseDispatch.apply(resolvedPromise, args);\n            });\n        }\n    };\n\n    // XXX deprecated\n    promise.valueOf = function () {\n        if (messages) {\n            return promise;\n        }\n        var nearerValue = nearer(resolvedPromise);\n        if (isPromise(nearerValue)) {\n            resolvedPromise = nearerValue; // shorten chain\n        }\n        return nearerValue;\n    };\n\n    promise.inspect = function () {\n        if (!resolvedPromise) {\n            return { state: \"pending\" };\n        }\n        return resolvedPromise.inspect();\n    };\n\n    if (Q.longStackSupport && hasStacks) {\n        try {\n            throw new Error();\n        } catch (e) {\n            // NOTE: don't try to use `Error.captureStackTrace` or transfer the\n            // accessor around; that causes memory leaks as per GH-111. Just\n            // reify the stack trace as a string ASAP.\n            //\n            // At the same time, cut off the first line; it's always just\n            // \"[object Promise]\\n\", as per the `toString`.\n            promise.stack = e.stack.substring(e.stack.indexOf(\"\\n\") + 1);\n            promise.stackCounter = longStackCounter++;\n        }\n    }\n\n    // NOTE: we do the checks for `resolvedPromise` in each method, instead of\n    // consolidating them into `become`, since otherwise we'd create new\n    // promises with the lines `become(whatever(value))`. See e.g. GH-252.\n\n    function become(newPromise) {\n        resolvedPromise = newPromise;\n\n        if (Q.longStackSupport && hasStacks) {\n            // Only hold a reference to the new promise if long stacks\n            // are enabled to reduce memory usage\n            promise.source = newPromise;\n        }\n\n        array_reduce(messages, function (undefined, message) {\n            Q.nextTick(function () {\n                newPromise.promiseDispatch.apply(newPromise, message);\n            });\n        }, void 0);\n\n        messages = void 0;\n        progressListeners = void 0;\n    }\n\n    deferred.promise = promise;\n    deferred.resolve = function (value) {\n        if (resolvedPromise) {\n            return;\n        }\n\n        become(Q(value));\n    };\n\n    deferred.fulfill = function (value) {\n        if (resolvedPromise) {\n            return;\n        }\n\n        become(fulfill(value));\n    };\n    deferred.reject = function (reason) {\n        if (resolvedPromise) {\n            return;\n        }\n\n        become(reject(reason));\n    };\n    deferred.notify = function (progress) {\n        if (resolvedPromise) {\n            return;\n        }\n\n        array_reduce(progressListeners, function (undefined, progressListener) {\n            Q.nextTick(function () {\n                progressListener(progress);\n            });\n        }, void 0);\n    };\n\n    return deferred;\n}\n\n/**\n * Creates a Node-style callback that will resolve or reject the deferred\n * promise.\n * @returns a nodeback\n */\ndefer.prototype.makeNodeResolver = function () {\n    var self = this;\n    return function (error, value) {\n        if (error) {\n            self.reject(error);\n        } else if (arguments.length > 2) {\n            self.resolve(array_slice(arguments, 1));\n        } else {\n            self.resolve(value);\n        }\n    };\n};\n\n/**\n * @param resolver {Function} a function that returns nothing and accepts\n * the resolve, reject, and notify functions for a deferred.\n * @returns a promise that may be resolved with the given resolve and reject\n * functions, or rejected by a thrown exception in resolver\n */\nQ.Promise = promise; // ES6\nQ.promise = promise;\nfunction promise(resolver) {\n    if (typeof resolver !== \"function\") {\n        throw new TypeError(\"resolver must be a function.\");\n    }\n    var deferred = defer();\n    try {\n        resolver(deferred.resolve, deferred.reject, deferred.notify);\n    } catch (reason) {\n        deferred.reject(reason);\n    }\n    return deferred.promise;\n}\n\npromise.race = race; // ES6\npromise.all = all; // ES6\npromise.reject = reject; // ES6\npromise.resolve = Q; // ES6\n\n// XXX experimental.  This method is a way to denote that a local value is\n// serializable and should be immediately dispatched to a remote upon request,\n// instead of passing a reference.\nQ.passByCopy = function (object) {\n    //freeze(object);\n    //passByCopies.set(object, true);\n    return object;\n};\n\nPromise.prototype.passByCopy = function () {\n    //freeze(object);\n    //passByCopies.set(object, true);\n    return this;\n};\n\n/**\n * If two promises eventually fulfill to the same value, promises that value,\n * but otherwise rejects.\n * @param x {Any*}\n * @param y {Any*}\n * @returns {Any*} a promise for x and y if they are the same, but a rejection\n * otherwise.\n *\n */\nQ.join = function (x, y) {\n    return Q(x).join(y);\n};\n\nPromise.prototype.join = function (that) {\n    return Q([this, that]).spread(function (x, y) {\n        if (x === y) {\n            // TODO: \"===\" should be Object.is or equiv\n            return x;\n        } else {\n            throw new Error(\"Q can't join: not the same: \" + x + \" \" + y);\n        }\n    });\n};\n\n/**\n * Returns a promise for the first of an array of promises to become settled.\n * @param answers {Array[Any*]} promises to race\n * @returns {Any*} the first promise to be settled\n */\nQ.race = race;\nfunction race(answerPs) {\n    return promise(function (resolve, reject) {\n        // Switch to this once we can assume at least ES5\n        // answerPs.forEach(function (answerP) {\n        //     Q(answerP).then(resolve, reject);\n        // });\n        // Use this in the meantime\n        for (var i = 0, len = answerPs.length; i < len; i++) {\n            Q(answerPs[i]).then(resolve, reject);\n        }\n    });\n}\n\nPromise.prototype.race = function () {\n    return this.then(Q.race);\n};\n\n/**\n * Constructs a Promise with a promise descriptor object and optional fallback\n * function.  The descriptor contains methods like when(rejected), get(name),\n * set(name, value), post(name, args), and delete(name), which all\n * return either a value, a promise for a value, or a rejection.  The fallback\n * accepts the operation name, a resolver, and any further arguments that would\n * have been forwarded to the appropriate method above had a method been\n * provided with the proper name.  The API makes no guarantees about the nature\n * of the returned object, apart from that it is usable whereever promises are\n * bought and sold.\n */\nQ.makePromise = Promise;\nfunction Promise(descriptor, fallback, inspect) {\n    if (fallback === void 0) {\n        fallback = function (op) {\n            return reject(new Error(\n                \"Promise does not support operation: \" + op\n            ));\n        };\n    }\n    if (inspect === void 0) {\n        inspect = function () {\n            return {state: \"unknown\"};\n        };\n    }\n\n    var promise = object_create(Promise.prototype);\n\n    promise.promiseDispatch = function (resolve, op, args) {\n        var result;\n        try {\n            if (descriptor[op]) {\n                result = descriptor[op].apply(promise, args);\n            } else {\n                result = fallback.call(promise, op, args);\n            }\n        } catch (exception) {\n            result = reject(exception);\n        }\n        if (resolve) {\n            resolve(result);\n        }\n    };\n\n    promise.inspect = inspect;\n\n    // XXX deprecated `valueOf` and `exception` support\n    if (inspect) {\n        var inspected = inspect();\n        if (inspected.state === \"rejected\") {\n            promise.exception = inspected.reason;\n        }\n\n        promise.valueOf = function () {\n            var inspected = inspect();\n            if (inspected.state === \"pending\" ||\n                inspected.state === \"rejected\") {\n                return promise;\n            }\n            return inspected.value;\n        };\n    }\n\n    return promise;\n}\n\nPromise.prototype.toString = function () {\n    return \"[object Promise]\";\n};\n\nPromise.prototype.then = function (fulfilled, rejected, progressed) {\n    var self = this;\n    var deferred = defer();\n    var done = false;   // ensure the untrusted promise makes at most a\n                        // single call to one of the callbacks\n\n    function _fulfilled(value) {\n        try {\n            return typeof fulfilled === \"function\" ? fulfilled(value) : value;\n        } catch (exception) {\n            return reject(exception);\n        }\n    }\n\n    function _rejected(exception) {\n        if (typeof rejected === \"function\") {\n            makeStackTraceLong(exception, self);\n            try {\n                return rejected(exception);\n            } catch (newException) {\n                return reject(newException);\n            }\n        }\n        return reject(exception);\n    }\n\n    function _progressed(value) {\n        return typeof progressed === \"function\" ? progressed(value) : value;\n    }\n\n    Q.nextTick(function () {\n        self.promiseDispatch(function (value) {\n            if (done) {\n                return;\n            }\n            done = true;\n\n            deferred.resolve(_fulfilled(value));\n        }, \"when\", [function (exception) {\n            if (done) {\n                return;\n            }\n            done = true;\n\n            deferred.resolve(_rejected(exception));\n        }]);\n    });\n\n    // Progress propagator need to be attached in the current tick.\n    self.promiseDispatch(void 0, \"when\", [void 0, function (value) {\n        var newValue;\n        var threw = false;\n        try {\n            newValue = _progressed(value);\n        } catch (e) {\n            threw = true;\n            if (Q.onerror) {\n                Q.onerror(e);\n            } else {\n                throw e;\n            }\n        }\n\n        if (!threw) {\n            deferred.notify(newValue);\n        }\n    }]);\n\n    return deferred.promise;\n};\n\nQ.tap = function (promise, callback) {\n    return Q(promise).tap(callback);\n};\n\n/**\n * Works almost like \"finally\", but not called for rejections.\n * Original resolution value is passed through callback unaffected.\n * Callback may return a promise that will be awaited for.\n * @param {Function} callback\n * @returns {Q.Promise}\n * @example\n * doSomething()\n *   .then(...)\n *   .tap(console.log)\n *   .then(...);\n */\nPromise.prototype.tap = function (callback) {\n    callback = Q(callback);\n\n    return this.then(function (value) {\n        return callback.fcall(value).thenResolve(value);\n    });\n};\n\n/**\n * Registers an observer on a promise.\n *\n * Guarantees:\n *\n * 1. that fulfilled and rejected will be called only once.\n * 2. that either the fulfilled callback or the rejected callback will be\n *    called, but not both.\n * 3. that fulfilled and rejected will not be called in this turn.\n *\n * @param value      promise or immediate reference to observe\n * @param fulfilled  function to be called with the fulfilled value\n * @param rejected   function to be called with the rejection exception\n * @param progressed function to be called on any progress notifications\n * @return promise for the return value from the invoked callback\n */\nQ.when = when;\nfunction when(value, fulfilled, rejected, progressed) {\n    return Q(value).then(fulfilled, rejected, progressed);\n}\n\nPromise.prototype.thenResolve = function (value) {\n    return this.then(function () { return value; });\n};\n\nQ.thenResolve = function (promise, value) {\n    return Q(promise).thenResolve(value);\n};\n\nPromise.prototype.thenReject = function (reason) {\n    return this.then(function () { throw reason; });\n};\n\nQ.thenReject = function (promise, reason) {\n    return Q(promise).thenReject(reason);\n};\n\n/**\n * If an object is not a promise, it is as \"near\" as possible.\n * If a promise is rejected, it is as \"near\" as possible too.\n * If it’s a fulfilled promise, the fulfillment value is nearer.\n * If it’s a deferred promise and the deferred has been resolved, the\n * resolution is \"nearer\".\n * @param object\n * @returns most resolved (nearest) form of the object\n */\n\n// XXX should we re-do this?\nQ.nearer = nearer;\nfunction nearer(value) {\n    if (isPromise(value)) {\n        var inspected = value.inspect();\n        if (inspected.state === \"fulfilled\") {\n            return inspected.value;\n        }\n    }\n    return value;\n}\n\n/**\n * @returns whether the given object is a promise.\n * Otherwise it is a fulfilled value.\n */\nQ.isPromise = isPromise;\nfunction isPromise(object) {\n    return object instanceof Promise;\n}\n\nQ.isPromiseAlike = isPromiseAlike;\nfunction isPromiseAlike(object) {\n    return isObject(object) && typeof object.then === \"function\";\n}\n\n/**\n * @returns whether the given object is a pending promise, meaning not\n * fulfilled or rejected.\n */\nQ.isPending = isPending;\nfunction isPending(object) {\n    return isPromise(object) && object.inspect().state === \"pending\";\n}\n\nPromise.prototype.isPending = function () {\n    return this.inspect().state === \"pending\";\n};\n\n/**\n * @returns whether the given object is a value or fulfilled\n * promise.\n */\nQ.isFulfilled = isFulfilled;\nfunction isFulfilled(object) {\n    return !isPromise(object) || object.inspect().state === \"fulfilled\";\n}\n\nPromise.prototype.isFulfilled = function () {\n    return this.inspect().state === \"fulfilled\";\n};\n\n/**\n * @returns whether the given object is a rejected promise.\n */\nQ.isRejected = isRejected;\nfunction isRejected(object) {\n    return isPromise(object) && object.inspect().state === \"rejected\";\n}\n\nPromise.prototype.isRejected = function () {\n    return this.inspect().state === \"rejected\";\n};\n\n//// BEGIN UNHANDLED REJECTION TRACKING\n\n// This promise library consumes exceptions thrown in handlers so they can be\n// handled by a subsequent promise.  The exceptions get added to this array when\n// they are created, and removed when they are handled.  Note that in ES6 or\n// shimmed environments, this would naturally be a `Set`.\nvar unhandledReasons = [];\nvar unhandledRejections = [];\nvar reportedUnhandledRejections = [];\nvar trackUnhandledRejections = true;\n\nfunction resetUnhandledRejections() {\n    unhandledReasons.length = 0;\n    unhandledRejections.length = 0;\n\n    if (!trackUnhandledRejections) {\n        trackUnhandledRejections = true;\n    }\n}\n\nfunction trackRejection(promise, reason) {\n    if (!trackUnhandledRejections) {\n        return;\n    }\n    if (typeof process === \"object\" && typeof process.emit === \"function\") {\n        Q.nextTick.runAfter(function () {\n            if (array_indexOf(unhandledRejections, promise) !== -1) {\n                process.emit(\"unhandledRejection\", reason, promise);\n                reportedUnhandledRejections.push(promise);\n            }\n        });\n    }\n\n    unhandledRejections.push(promise);\n    if (reason && typeof reason.stack !== \"undefined\") {\n        unhandledReasons.push(reason.stack);\n    } else {\n        unhandledReasons.push(\"(no stack) \" + reason);\n    }\n}\n\nfunction untrackRejection(promise) {\n    if (!trackUnhandledRejections) {\n        return;\n    }\n\n    var at = array_indexOf(unhandledRejections, promise);\n    if (at !== -1) {\n        if (typeof process === \"object\" && typeof process.emit === \"function\") {\n            Q.nextTick.runAfter(function () {\n                var atReport = array_indexOf(reportedUnhandledRejections, promise);\n                if (atReport !== -1) {\n                    process.emit(\"rejectionHandled\", unhandledReasons[at], promise);\n                    reportedUnhandledRejections.splice(atReport, 1);\n                }\n            });\n        }\n        unhandledRejections.splice(at, 1);\n        unhandledReasons.splice(at, 1);\n    }\n}\n\nQ.resetUnhandledRejections = resetUnhandledRejections;\n\nQ.getUnhandledReasons = function () {\n    // Make a copy so that consumers can't interfere with our internal state.\n    return unhandledReasons.slice();\n};\n\nQ.stopUnhandledRejectionTracking = function () {\n    resetUnhandledRejections();\n    trackUnhandledRejections = false;\n};\n\nresetUnhandledRejections();\n\n//// END UNHANDLED REJECTION TRACKING\n\n/**\n * Constructs a rejected promise.\n * @param reason value describing the failure\n */\nQ.reject = reject;\nfunction reject(reason) {\n    var rejection = Promise({\n        \"when\": function (rejected) {\n            // note that the error has been handled\n            if (rejected) {\n                untrackRejection(this);\n            }\n            return rejected ? rejected(reason) : this;\n        }\n    }, function fallback() {\n        return this;\n    }, function inspect() {\n        return { state: \"rejected\", reason: reason };\n    });\n\n    // Note that the reason has not been handled.\n    trackRejection(rejection, reason);\n\n    return rejection;\n}\n\n/**\n * Constructs a fulfilled promise for an immediate reference.\n * @param value immediate reference\n */\nQ.fulfill = fulfill;\nfunction fulfill(value) {\n    return Promise({\n        \"when\": function () {\n            return value;\n        },\n        \"get\": function (name) {\n            return value[name];\n        },\n        \"set\": function (name, rhs) {\n            value[name] = rhs;\n        },\n        \"delete\": function (name) {\n            delete value[name];\n        },\n        \"post\": function (name, args) {\n            // Mark Miller proposes that post with no name should apply a\n            // promised function.\n            if (name === null || name === void 0) {\n                return value.apply(void 0, args);\n            } else {\n                return value[name].apply(value, args);\n            }\n        },\n        \"apply\": function (thisp, args) {\n            return value.apply(thisp, args);\n        },\n        \"keys\": function () {\n            return object_keys(value);\n        }\n    }, void 0, function inspect() {\n        return { state: \"fulfilled\", value: value };\n    });\n}\n\n/**\n * Converts thenables to Q promises.\n * @param promise thenable promise\n * @returns a Q promise\n */\nfunction coerce(promise) {\n    var deferred = defer();\n    Q.nextTick(function () {\n        try {\n            promise.then(deferred.resolve, deferred.reject, deferred.notify);\n        } catch (exception) {\n            deferred.reject(exception);\n        }\n    });\n    return deferred.promise;\n}\n\n/**\n * Annotates an object such that it will never be\n * transferred away from this process over any promise\n * communication channel.\n * @param object\n * @returns promise a wrapping of that object that\n * additionally responds to the \"isDef\" message\n * without a rejection.\n */\nQ.master = master;\nfunction master(object) {\n    return Promise({\n        \"isDef\": function () {}\n    }, function fallback(op, args) {\n        return dispatch(object, op, args);\n    }, function () {\n        return Q(object).inspect();\n    });\n}\n\n/**\n * Spreads the values of a promised array of arguments into the\n * fulfillment callback.\n * @param fulfilled callback that receives variadic arguments from the\n * promised array\n * @param rejected callback that receives the exception if the promise\n * is rejected.\n * @returns a promise for the return value or thrown exception of\n * either callback.\n */\nQ.spread = spread;\nfunction spread(value, fulfilled, rejected) {\n    return Q(value).spread(fulfilled, rejected);\n}\n\nPromise.prototype.spread = function (fulfilled, rejected) {\n    return this.all().then(function (array) {\n        return fulfilled.apply(void 0, array);\n    }, rejected);\n};\n\n/**\n * The async function is a decorator for generator functions, turning\n * them into asynchronous generators.  Although generators are only part\n * of the newest ECMAScript 6 drafts, this code does not cause syntax\n * errors in older engines.  This code should continue to work and will\n * in fact improve over time as the language improves.\n *\n * ES6 generators are currently part of V8 version 3.19 with the\n * --harmony-generators runtime flag enabled.  SpiderMonkey has had them\n * for longer, but under an older Python-inspired form.  This function\n * works on both kinds of generators.\n *\n * Decorates a generator function such that:\n *  - it may yield promises\n *  - execution will continue when that promise is fulfilled\n *  - the value of the yield expression will be the fulfilled value\n *  - it returns a promise for the return value (when the generator\n *    stops iterating)\n *  - the decorated function returns a promise for the return value\n *    of the generator or the first rejected promise among those\n *    yielded.\n *  - if an error is thrown in the generator, it propagates through\n *    every following yield until it is caught, or until it escapes\n *    the generator function altogether, and is translated into a\n *    rejection for the promise returned by the decorated generator.\n */\nQ.async = async;\nfunction async(makeGenerator) {\n    return function () {\n        // when verb is \"send\", arg is a value\n        // when verb is \"throw\", arg is an exception\n        function continuer(verb, arg) {\n            var result;\n\n            // Until V8 3.19 / Chromium 29 is released, SpiderMonkey is the only\n            // engine that has a deployed base of browsers that support generators.\n            // However, SM's generators use the Python-inspired semantics of\n            // outdated ES6 drafts.  We would like to support ES6, but we'd also\n            // like to make it possible to use generators in deployed browsers, so\n            // we also support Python-style generators.  At some point we can remove\n            // this block.\n\n            if (typeof StopIteration === \"undefined\") {\n                // ES6 Generators\n                try {\n                    result = generator[verb](arg);\n                } catch (exception) {\n                    return reject(exception);\n                }\n                if (result.done) {\n                    return Q(result.value);\n                } else {\n                    return when(result.value, callback, errback);\n                }\n            } else {\n                // SpiderMonkey Generators\n                // FIXME: Remove this case when SM does ES6 generators.\n                try {\n                    result = generator[verb](arg);\n                } catch (exception) {\n                    if (isStopIteration(exception)) {\n                        return Q(exception.value);\n                    } else {\n                        return reject(exception);\n                    }\n                }\n                return when(result, callback, errback);\n            }\n        }\n        var generator = makeGenerator.apply(this, arguments);\n        var callback = continuer.bind(continuer, \"next\");\n        var errback = continuer.bind(continuer, \"throw\");\n        return callback();\n    };\n}\n\n/**\n * The spawn function is a small wrapper around async that immediately\n * calls the generator and also ends the promise chain, so that any\n * unhandled errors are thrown instead of forwarded to the error\n * handler. This is useful because it's extremely common to run\n * generators at the top-level to work with libraries.\n */\nQ.spawn = spawn;\nfunction spawn(makeGenerator) {\n    Q.done(Q.async(makeGenerator)());\n}\n\n// FIXME: Remove this interface once ES6 generators are in SpiderMonkey.\n/**\n * Throws a ReturnValue exception to stop an asynchronous generator.\n *\n * This interface is a stop-gap measure to support generator return\n * values in older Firefox/SpiderMonkey.  In browsers that support ES6\n * generators like Chromium 29, just use \"return\" in your generator\n * functions.\n *\n * @param value the return value for the surrounding generator\n * @throws ReturnValue exception with the value.\n * @example\n * // ES6 style\n * Q.async(function* () {\n *      var foo = yield getFooPromise();\n *      var bar = yield getBarPromise();\n *      return foo + bar;\n * })\n * // Older SpiderMonkey style\n * Q.async(function () {\n *      var foo = yield getFooPromise();\n *      var bar = yield getBarPromise();\n *      Q.return(foo + bar);\n * })\n */\nQ[\"return\"] = _return;\nfunction _return(value) {\n    throw new QReturnValue(value);\n}\n\n/**\n * The promised function decorator ensures that any promise arguments\n * are settled and passed as values (`this` is also settled and passed\n * as a value).  It will also ensure that the result of a function is\n * always a promise.\n *\n * @example\n * var add = Q.promised(function (a, b) {\n *     return a + b;\n * });\n * add(Q(a), Q(B));\n *\n * @param {function} callback The function to decorate\n * @returns {function} a function that has been decorated.\n */\nQ.promised = promised;\nfunction promised(callback) {\n    return function () {\n        return spread([this, all(arguments)], function (self, args) {\n            return callback.apply(self, args);\n        });\n    };\n}\n\n/**\n * sends a message to a value in a future turn\n * @param object* the recipient\n * @param op the name of the message operation, e.g., \"when\",\n * @param args further arguments to be forwarded to the operation\n * @returns result {Promise} a promise for the result of the operation\n */\nQ.dispatch = dispatch;\nfunction dispatch(object, op, args) {\n    return Q(object).dispatch(op, args);\n}\n\nPromise.prototype.dispatch = function (op, args) {\n    var self = this;\n    var deferred = defer();\n    Q.nextTick(function () {\n        self.promiseDispatch(deferred.resolve, op, args);\n    });\n    return deferred.promise;\n};\n\n/**\n * Gets the value of a property in a future turn.\n * @param object    promise or immediate reference for target object\n * @param name      name of property to get\n * @return promise for the property value\n */\nQ.get = function (object, key) {\n    return Q(object).dispatch(\"get\", [key]);\n};\n\nPromise.prototype.get = function (key) {\n    return this.dispatch(\"get\", [key]);\n};\n\n/**\n * Sets the value of a property in a future turn.\n * @param object    promise or immediate reference for object object\n * @param name      name of property to set\n * @param value     new value of property\n * @return promise for the return value\n */\nQ.set = function (object, key, value) {\n    return Q(object).dispatch(\"set\", [key, value]);\n};\n\nPromise.prototype.set = function (key, value) {\n    return this.dispatch(\"set\", [key, value]);\n};\n\n/**\n * Deletes a property in a future turn.\n * @param object    promise or immediate reference for target object\n * @param name      name of property to delete\n * @return promise for the return value\n */\nQ.del = // XXX legacy\nQ[\"delete\"] = function (object, key) {\n    return Q(object).dispatch(\"delete\", [key]);\n};\n\nPromise.prototype.del = // XXX legacy\nPromise.prototype[\"delete\"] = function (key) {\n    return this.dispatch(\"delete\", [key]);\n};\n\n/**\n * Invokes a method in a future turn.\n * @param object    promise or immediate reference for target object\n * @param name      name of method to invoke\n * @param value     a value to post, typically an array of\n *                  invocation arguments for promises that\n *                  are ultimately backed with `resolve` values,\n *                  as opposed to those backed with URLs\n *                  wherein the posted value can be any\n *                  JSON serializable object.\n * @return promise for the return value\n */\n// bound locally because it is used by other methods\nQ.mapply = // XXX As proposed by \"Redsandro\"\nQ.post = function (object, name, args) {\n    return Q(object).dispatch(\"post\", [name, args]);\n};\n\nPromise.prototype.mapply = // XXX As proposed by \"Redsandro\"\nPromise.prototype.post = function (name, args) {\n    return this.dispatch(\"post\", [name, args]);\n};\n\n/**\n * Invokes a method in a future turn.\n * @param object    promise or immediate reference for target object\n * @param name      name of method to invoke\n * @param ...args   array of invocation arguments\n * @return promise for the return value\n */\nQ.send = // XXX Mark Miller's proposed parlance\nQ.mcall = // XXX As proposed by \"Redsandro\"\nQ.invoke = function (object, name /*...args*/) {\n    return Q(object).dispatch(\"post\", [name, array_slice(arguments, 2)]);\n};\n\nPromise.prototype.send = // XXX Mark Miller's proposed parlance\nPromise.prototype.mcall = // XXX As proposed by \"Redsandro\"\nPromise.prototype.invoke = function (name /*...args*/) {\n    return this.dispatch(\"post\", [name, array_slice(arguments, 1)]);\n};\n\n/**\n * Applies the promised function in a future turn.\n * @param object    promise or immediate reference for target function\n * @param args      array of application arguments\n */\nQ.fapply = function (object, args) {\n    return Q(object).dispatch(\"apply\", [void 0, args]);\n};\n\nPromise.prototype.fapply = function (args) {\n    return this.dispatch(\"apply\", [void 0, args]);\n};\n\n/**\n * Calls the promised function in a future turn.\n * @param object    promise or immediate reference for target function\n * @param ...args   array of application arguments\n */\nQ[\"try\"] =\nQ.fcall = function (object /* ...args*/) {\n    return Q(object).dispatch(\"apply\", [void 0, array_slice(arguments, 1)]);\n};\n\nPromise.prototype.fcall = function (/*...args*/) {\n    return this.dispatch(\"apply\", [void 0, array_slice(arguments)]);\n};\n\n/**\n * Binds the promised function, transforming return values into a fulfilled\n * promise and thrown errors into a rejected one.\n * @param object    promise or immediate reference for target function\n * @param ...args   array of application arguments\n */\nQ.fbind = function (object /*...args*/) {\n    var promise = Q(object);\n    var args = array_slice(arguments, 1);\n    return function fbound() {\n        return promise.dispatch(\"apply\", [\n            this,\n            args.concat(array_slice(arguments))\n        ]);\n    };\n};\nPromise.prototype.fbind = function (/*...args*/) {\n    var promise = this;\n    var args = array_slice(arguments);\n    return function fbound() {\n        return promise.dispatch(\"apply\", [\n            this,\n            args.concat(array_slice(arguments))\n        ]);\n    };\n};\n\n/**\n * Requests the names of the owned properties of a promised\n * object in a future turn.\n * @param object    promise or immediate reference for target object\n * @return promise for the keys of the eventually settled object\n */\nQ.keys = function (object) {\n    return Q(object).dispatch(\"keys\", []);\n};\n\nPromise.prototype.keys = function () {\n    return this.dispatch(\"keys\", []);\n};\n\n/**\n * Turns an array of promises into a promise for an array.  If any of\n * the promises gets rejected, the whole array is rejected immediately.\n * @param {Array*} an array (or promise for an array) of values (or\n * promises for values)\n * @returns a promise for an array of the corresponding values\n */\n// By Mark Miller\n// http://wiki.ecmascript.org/doku.php?id=strawman:concurrency&rev=1308776521#allfulfilled\nQ.all = all;\nfunction all(promises) {\n    return when(promises, function (promises) {\n        var pendingCount = 0;\n        var deferred = defer();\n        array_reduce(promises, function (undefined, promise, index) {\n            var snapshot;\n            if (\n                isPromise(promise) &&\n                (snapshot = promise.inspect()).state === \"fulfilled\"\n            ) {\n                promises[index] = snapshot.value;\n            } else {\n                ++pendingCount;\n                when(\n                    promise,\n                    function (value) {\n                        promises[index] = value;\n                        if (--pendingCount === 0) {\n                            deferred.resolve(promises);\n                        }\n                    },\n                    deferred.reject,\n                    function (progress) {\n                        deferred.notify({ index: index, value: progress });\n                    }\n                );\n            }\n        }, void 0);\n        if (pendingCount === 0) {\n            deferred.resolve(promises);\n        }\n        return deferred.promise;\n    });\n}\n\nPromise.prototype.all = function () {\n    return all(this);\n};\n\n/**\n * Returns the first resolved promise of an array. Prior rejected promises are\n * ignored.  Rejects only if all promises are rejected.\n * @param {Array*} an array containing values or promises for values\n * @returns a promise fulfilled with the value of the first resolved promise,\n * or a rejected promise if all promises are rejected.\n */\nQ.any = any;\n\nfunction any(promises) {\n    if (promises.length === 0) {\n        return Q.resolve();\n    }\n\n    var deferred = Q.defer();\n    var pendingCount = 0;\n    array_reduce(promises, function (prev, current, index) {\n        var promise = promises[index];\n\n        pendingCount++;\n\n        when(promise, onFulfilled, onRejected, onProgress);\n        function onFulfilled(result) {\n            deferred.resolve(result);\n        }\n        function onRejected(err) {\n            pendingCount--;\n            if (pendingCount === 0) {\n                var rejection = err || new Error(\"\" + err);\n\n                rejection.message = (\"Q can't get fulfillment value from any promise, all \" +\n                    \"promises were rejected. Last error message: \" + rejection.message);\n\n                deferred.reject(rejection);\n            }\n        }\n        function onProgress(progress) {\n            deferred.notify({\n                index: index,\n                value: progress\n            });\n        }\n    }, undefined);\n\n    return deferred.promise;\n}\n\nPromise.prototype.any = function () {\n    return any(this);\n};\n\n/**\n * Waits for all promises to be settled, either fulfilled or\n * rejected.  This is distinct from `all` since that would stop\n * waiting at the first rejection.  The promise returned by\n * `allResolved` will never be rejected.\n * @param promises a promise for an array (or an array) of promises\n * (or values)\n * @return a promise for an array of promises\n */\nQ.allResolved = deprecate(allResolved, \"allResolved\", \"allSettled\");\nfunction allResolved(promises) {\n    return when(promises, function (promises) {\n        promises = array_map(promises, Q);\n        return when(all(array_map(promises, function (promise) {\n            return when(promise, noop, noop);\n        })), function () {\n            return promises;\n        });\n    });\n}\n\nPromise.prototype.allResolved = function () {\n    return allResolved(this);\n};\n\n/**\n * @see Promise#allSettled\n */\nQ.allSettled = allSettled;\nfunction allSettled(promises) {\n    return Q(promises).allSettled();\n}\n\n/**\n * Turns an array of promises into a promise for an array of their states (as\n * returned by `inspect`) when they have all settled.\n * @param {Array[Any*]} values an array (or promise for an array) of values (or\n * promises for values)\n * @returns {Array[State]} an array of states for the respective values.\n */\nPromise.prototype.allSettled = function () {\n    return this.then(function (promises) {\n        return all(array_map(promises, function (promise) {\n            promise = Q(promise);\n            function regardless() {\n                return promise.inspect();\n            }\n            return promise.then(regardless, regardless);\n        }));\n    });\n};\n\n/**\n * Captures the failure of a promise, giving an oportunity to recover\n * with a callback.  If the given promise is fulfilled, the returned\n * promise is fulfilled.\n * @param {Any*} promise for something\n * @param {Function} callback to fulfill the returned promise if the\n * given promise is rejected\n * @returns a promise for the return value of the callback\n */\nQ.fail = // XXX legacy\nQ[\"catch\"] = function (object, rejected) {\n    return Q(object).then(void 0, rejected);\n};\n\nPromise.prototype.fail = // XXX legacy\nPromise.prototype[\"catch\"] = function (rejected) {\n    return this.then(void 0, rejected);\n};\n\n/**\n * Attaches a listener that can respond to progress notifications from a\n * promise's originating deferred. This listener receives the exact arguments\n * passed to ``deferred.notify``.\n * @param {Any*} promise for something\n * @param {Function} callback to receive any progress notifications\n * @returns the given promise, unchanged\n */\nQ.progress = progress;\nfunction progress(object, progressed) {\n    return Q(object).then(void 0, void 0, progressed);\n}\n\nPromise.prototype.progress = function (progressed) {\n    return this.then(void 0, void 0, progressed);\n};\n\n/**\n * Provides an opportunity to observe the settling of a promise,\n * regardless of whether the promise is fulfilled or rejected.  Forwards\n * the resolution to the returned promise when the callback is done.\n * The callback can return a promise to defer completion.\n * @param {Any*} promise\n * @param {Function} callback to observe the resolution of the given\n * promise, takes no arguments.\n * @returns a promise for the resolution of the given promise when\n * ``fin`` is done.\n */\nQ.fin = // XXX legacy\nQ[\"finally\"] = function (object, callback) {\n    return Q(object)[\"finally\"](callback);\n};\n\nPromise.prototype.fin = // XXX legacy\nPromise.prototype[\"finally\"] = function (callback) {\n    if (!callback || typeof callback.apply !== \"function\") {\n        throw new Error(\"Q can't apply finally callback\");\n    }\n    callback = Q(callback);\n    return this.then(function (value) {\n        return callback.fcall().then(function () {\n            return value;\n        });\n    }, function (reason) {\n        // TODO attempt to recycle the rejection with \"this\".\n        return callback.fcall().then(function () {\n            throw reason;\n        });\n    });\n};\n\n/**\n * Terminates a chain of promises, forcing rejections to be\n * thrown as exceptions.\n * @param {Any*} promise at the end of a chain of promises\n * @returns nothing\n */\nQ.done = function (object, fulfilled, rejected, progress) {\n    return Q(object).done(fulfilled, rejected, progress);\n};\n\nPromise.prototype.done = function (fulfilled, rejected, progress) {\n    var onUnhandledError = function (error) {\n        // forward to a future turn so that ``when``\n        // does not catch it and turn it into a rejection.\n        Q.nextTick(function () {\n            makeStackTraceLong(error, promise);\n            if (Q.onerror) {\n                Q.onerror(error);\n            } else {\n                throw error;\n            }\n        });\n    };\n\n    // Avoid unnecessary `nextTick`ing via an unnecessary `when`.\n    var promise = fulfilled || rejected || progress ?\n        this.then(fulfilled, rejected, progress) :\n        this;\n\n    if (typeof process === \"object\" && process && process.domain) {\n        onUnhandledError = process.domain.bind(onUnhandledError);\n    }\n\n    promise.then(void 0, onUnhandledError);\n};\n\n/**\n * Causes a promise to be rejected if it does not get fulfilled before\n * some milliseconds time out.\n * @param {Any*} promise\n * @param {Number} milliseconds timeout\n * @param {Any*} custom error message or Error object (optional)\n * @returns a promise for the resolution of the given promise if it is\n * fulfilled before the timeout, otherwise rejected.\n */\nQ.timeout = function (object, ms, error) {\n    return Q(object).timeout(ms, error);\n};\n\nPromise.prototype.timeout = function (ms, error) {\n    var deferred = defer();\n    var timeoutId = setTimeout(function () {\n        if (!error || \"string\" === typeof error) {\n            error = new Error(error || \"Timed out after \" + ms + \" ms\");\n            error.code = \"ETIMEDOUT\";\n        }\n        deferred.reject(error);\n    }, ms);\n\n    this.then(function (value) {\n        clearTimeout(timeoutId);\n        deferred.resolve(value);\n    }, function (exception) {\n        clearTimeout(timeoutId);\n        deferred.reject(exception);\n    }, deferred.notify);\n\n    return deferred.promise;\n};\n\n/**\n * Returns a promise for the given value (or promised value), some\n * milliseconds after it resolved. Passes rejections immediately.\n * @param {Any*} promise\n * @param {Number} milliseconds\n * @returns a promise for the resolution of the given promise after milliseconds\n * time has elapsed since the resolution of the given promise.\n * If the given promise rejects, that is passed immediately.\n */\nQ.delay = function (object, timeout) {\n    if (timeout === void 0) {\n        timeout = object;\n        object = void 0;\n    }\n    return Q(object).delay(timeout);\n};\n\nPromise.prototype.delay = function (timeout) {\n    return this.then(function (value) {\n        var deferred = defer();\n        setTimeout(function () {\n            deferred.resolve(value);\n        }, timeout);\n        return deferred.promise;\n    });\n};\n\n/**\n * Passes a continuation to a Node function, which is called with the given\n * arguments provided as an array, and returns a promise.\n *\n *      Q.nfapply(FS.readFile, [__filename])\n *      .then(function (content) {\n *      })\n *\n */\nQ.nfapply = function (callback, args) {\n    return Q(callback).nfapply(args);\n};\n\nPromise.prototype.nfapply = function (args) {\n    var deferred = defer();\n    var nodeArgs = array_slice(args);\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.fapply(nodeArgs).fail(deferred.reject);\n    return deferred.promise;\n};\n\n/**\n * Passes a continuation to a Node function, which is called with the given\n * arguments provided individually, and returns a promise.\n * @example\n * Q.nfcall(FS.readFile, __filename)\n * .then(function (content) {\n * })\n *\n */\nQ.nfcall = function (callback /*...args*/) {\n    var args = array_slice(arguments, 1);\n    return Q(callback).nfapply(args);\n};\n\nPromise.prototype.nfcall = function (/*...args*/) {\n    var nodeArgs = array_slice(arguments);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.fapply(nodeArgs).fail(deferred.reject);\n    return deferred.promise;\n};\n\n/**\n * Wraps a NodeJS continuation passing function and returns an equivalent\n * version that returns a promise.\n * @example\n * Q.nfbind(FS.readFile, __filename)(\"utf-8\")\n * .then(console.log)\n * .done()\n */\nQ.nfbind =\nQ.denodeify = function (callback /*...args*/) {\n    if (callback === undefined) {\n        throw new Error(\"Q can't wrap an undefined function\");\n    }\n    var baseArgs = array_slice(arguments, 1);\n    return function () {\n        var nodeArgs = baseArgs.concat(array_slice(arguments));\n        var deferred = defer();\n        nodeArgs.push(deferred.makeNodeResolver());\n        Q(callback).fapply(nodeArgs).fail(deferred.reject);\n        return deferred.promise;\n    };\n};\n\nPromise.prototype.nfbind =\nPromise.prototype.denodeify = function (/*...args*/) {\n    var args = array_slice(arguments);\n    args.unshift(this);\n    return Q.denodeify.apply(void 0, args);\n};\n\nQ.nbind = function (callback, thisp /*...args*/) {\n    var baseArgs = array_slice(arguments, 2);\n    return function () {\n        var nodeArgs = baseArgs.concat(array_slice(arguments));\n        var deferred = defer();\n        nodeArgs.push(deferred.makeNodeResolver());\n        function bound() {\n            return callback.apply(thisp, arguments);\n        }\n        Q(bound).fapply(nodeArgs).fail(deferred.reject);\n        return deferred.promise;\n    };\n};\n\nPromise.prototype.nbind = function (/*thisp, ...args*/) {\n    var args = array_slice(arguments, 0);\n    args.unshift(this);\n    return Q.nbind.apply(void 0, args);\n};\n\n/**\n * Calls a method of a Node-style object that accepts a Node-style\n * callback with a given array of arguments, plus a provided callback.\n * @param object an object that has the named method\n * @param {String} name name of the method of object\n * @param {Array} args arguments to pass to the method; the callback\n * will be provided by Q and appended to these arguments.\n * @returns a promise for the value or error\n */\nQ.nmapply = // XXX As proposed by \"Redsandro\"\nQ.npost = function (object, name, args) {\n    return Q(object).npost(name, args);\n};\n\nPromise.prototype.nmapply = // XXX As proposed by \"Redsandro\"\nPromise.prototype.npost = function (name, args) {\n    var nodeArgs = array_slice(args || []);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n    return deferred.promise;\n};\n\n/**\n * Calls a method of a Node-style object that accepts a Node-style\n * callback, forwarding the given variadic arguments, plus a provided\n * callback argument.\n * @param object an object that has the named method\n * @param {String} name name of the method of object\n * @param ...args arguments to pass to the method; the callback will\n * be provided by Q and appended to these arguments.\n * @returns a promise for the value or error\n */\nQ.nsend = // XXX Based on Mark Miller's proposed \"send\"\nQ.nmcall = // XXX Based on \"Redsandro's\" proposal\nQ.ninvoke = function (object, name /*...args*/) {\n    var nodeArgs = array_slice(arguments, 2);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    Q(object).dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n    return deferred.promise;\n};\n\nPromise.prototype.nsend = // XXX Based on Mark Miller's proposed \"send\"\nPromise.prototype.nmcall = // XXX Based on \"Redsandro's\" proposal\nPromise.prototype.ninvoke = function (name /*...args*/) {\n    var nodeArgs = array_slice(arguments, 1);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n    return deferred.promise;\n};\n\n/**\n * If a function would like to support both Node continuation-passing-style and\n * promise-returning-style, it can end its internal promise chain with\n * `nodeify(nodeback)`, forwarding the optional nodeback argument.  If the user\n * elects to use a nodeback, the result will be sent there.  If they do not\n * pass a nodeback, they will receive the result promise.\n * @param object a result (or a promise for a result)\n * @param {Function} nodeback a Node.js-style callback\n * @returns either the promise or nothing\n */\nQ.nodeify = nodeify;\nfunction nodeify(object, nodeback) {\n    return Q(object).nodeify(nodeback);\n}\n\nPromise.prototype.nodeify = function (nodeback) {\n    if (nodeback) {\n        this.then(function (value) {\n            Q.nextTick(function () {\n                nodeback(null, value);\n            });\n        }, function (error) {\n            Q.nextTick(function () {\n                nodeback(error);\n            });\n        });\n    } else {\n        return this;\n    }\n};\n\nQ.noConflict = function() {\n    throw new Error(\"Q.noConflict only works when Q is used as a global\");\n};\n\n// All code before this point will be filtered from stack traces.\nvar qEndingLine = captureLine();\n\nreturn Q;\n\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}